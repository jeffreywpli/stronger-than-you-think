/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 04:53:15 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 733/57000 [00:00<00:07, 7320.98it/s]  3%|▎         | 1472/57000 [00:00<00:07, 7359.24it/s]  4%|▍         | 2210/57000 [00:00<00:07, 7366.19it/s]  5%|▌         | 2950/57000 [00:00<00:07, 7379.30it/s]  6%|▋         | 3692/57000 [00:00<00:07, 7391.40it/s]  8%|▊         | 4437/57000 [00:00<00:07, 7409.15it/s]  9%|▉         | 5181/57000 [00:00<00:06, 7416.78it/s] 10%|█         | 5929/57000 [00:00<00:06, 7435.77it/s] 12%|█▏        | 6676/57000 [00:00<00:06, 7446.06it/s] 13%|█▎        | 7422/57000 [00:01<00:06, 7447.63it/s] 14%|█▍        | 8167/57000 [00:01<00:06, 7446.57it/s] 16%|█▌        | 8912/57000 [00:01<00:06, 7444.82it/s] 17%|█▋        | 9658/57000 [00:01<00:06, 7448.96it/s] 18%|█▊        | 10403/57000 [00:01<00:06, 7442.58it/s] 20%|█▉        | 11149/57000 [00:01<00:06, 7446.50it/s] 21%|██        | 11895/57000 [00:01<00:06, 7447.82it/s] 22%|██▏       | 12641/57000 [00:01<00:05, 7451.20it/s] 23%|██▎       | 13389/57000 [00:01<00:05, 7459.40it/s] 25%|██▍       | 14135/57000 [00:01<00:05, 7450.00it/s] 26%|██▌       | 14881/57000 [00:02<00:05, 7420.47it/s] 27%|██▋       | 15624/57000 [00:02<00:05, 7405.04it/s] 29%|██▊       | 16365/57000 [00:02<00:05, 7394.33it/s] 30%|███       | 17105/57000 [00:02<00:05, 7383.16it/s] 31%|███▏      | 17844/57000 [00:02<00:05, 7378.49it/s] 33%|███▎      | 18583/57000 [00:02<00:05, 7379.87it/s] 34%|███▍      | 19321/57000 [00:02<00:05, 7373.64it/s] 35%|███▌      | 20062/57000 [00:02<00:05, 7381.77it/s] 36%|███▋      | 20801/57000 [00:02<00:04, 7372.37it/s] 38%|███▊      | 21539/57000 [00:02<00:04, 7360.03it/s] 39%|███▉      | 22276/57000 [00:03<00:04, 7356.26it/s] 40%|████      | 23014/57000 [00:03<00:04, 7363.12it/s] 42%|████▏     | 23752/57000 [00:03<00:04, 7365.30it/s] 43%|████▎     | 24489/57000 [00:03<00:04, 7365.75it/s] 44%|████▍     | 25226/57000 [00:03<00:04, 7362.54it/s] 46%|████▌     | 25964/57000 [00:03<00:04, 7366.46it/s] 47%|████▋     | 26701/57000 [00:03<00:04, 7361.56it/s] 48%|████▊     | 27439/57000 [00:03<00:04, 7365.99it/s] 49%|████▉     | 28177/57000 [00:03<00:03, 7369.99it/s] 51%|█████     | 28921/57000 [00:03<00:03, 7389.24it/s] 52%|█████▏    | 29663/57000 [00:04<00:03, 7396.91it/s] 53%|█████▎    | 30406/57000 [00:04<00:03, 7404.51it/s] 55%|█████▍    | 31151/57000 [00:04<00:03, 7416.34it/s] 56%|█████▌    | 31894/57000 [00:04<00:03, 7419.85it/s] 57%|█████▋    | 32639/57000 [00:04<00:03, 7427.08it/s] 59%|█████▊    | 33382/57000 [00:04<00:03, 7421.26it/s] 60%|█████▉    | 34125/57000 [00:04<00:03, 7414.18it/s] 61%|██████    | 34868/57000 [00:04<00:02, 7417.28it/s] 62%|██████▏   | 35610/57000 [00:04<00:02, 7416.46it/s] 64%|██████▍   | 36352/57000 [00:04<00:02, 7413.04it/s] 65%|██████▌   | 37095/57000 [00:05<00:02, 7416.77it/s] 66%|██████▋   | 37837/57000 [00:05<00:02, 7414.42it/s] 68%|██████▊   | 38579/57000 [00:05<00:02, 7414.15it/s] 69%|██████▉   | 39322/57000 [00:05<00:02, 7416.45it/s] 70%|███████   | 40064/57000 [00:05<00:02, 7413.66it/s] 72%|███████▏  | 40807/57000 [00:05<00:02, 7416.02it/s] 73%|███████▎  | 41550/57000 [00:05<00:02, 7417.35it/s] 74%|███████▍  | 42292/57000 [00:05<00:01, 7406.38it/s] 75%|███████▌  | 43033/57000 [00:05<00:01, 7400.48it/s] 77%|███████▋  | 43774/57000 [00:05<00:01, 7389.83it/s] 78%|███████▊  | 44516/57000 [00:06<00:01, 7397.00it/s] 79%|███████▉  | 45258/57000 [00:06<00:01, 7402.68it/s] 81%|████████  | 46004/57000 [00:06<00:01, 7418.46it/s] 82%|████████▏ | 46748/57000 [00:06<00:01, 7424.35it/s] 83%|████████▎ | 47491/57000 [00:06<00:01, 7420.60it/s] 85%|████████▍ | 48234/57000 [00:06<00:01, 7405.27it/s] 86%|████████▌ | 48975/57000 [00:06<00:01, 7399.84it/s] 87%|████████▋ | 49715/57000 [00:06<00:00, 7387.65it/s] 89%|████████▊ | 50454/57000 [00:06<00:00, 7380.86it/s] 90%|████████▉ | 51193/57000 [00:06<00:00, 7370.52it/s] 91%|█████████ | 51931/57000 [00:07<00:00, 7337.31it/s] 92%|█████████▏| 52677/57000 [00:07<00:00, 7371.34it/s] 94%|█████████▎| 53421/57000 [00:07<00:00, 7391.30it/s] 95%|█████████▌| 54161/57000 [00:07<00:00, 7393.39it/s] 96%|█████████▋| 54901/57000 [00:07<00:00, 7394.04it/s] 98%|█████████▊| 55641/57000 [00:07<00:00, 7389.79it/s] 99%|█████████▉| 56380/57000 [00:07<00:00, 7387.89it/s]100%|██████████| 57000/57000 [00:07<00:00, 7401.17it/s]
2022-05-05 04:53:23 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 744/3000 [00:00<00:00, 7431.08it/s] 50%|████▉     | 1497/3000 [00:00<00:00, 7483.75it/s] 75%|███████▍  | 2248/3000 [00:00<00:00, 7493.44it/s]100%|██████████| 3000/3000 [00:00<00:00, 7503.40it/s]100%|██████████| 3000/3000 [00:00<00:00, 7492.52it/s]
2022-05-05 04:53:24 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 745/10000 [00:00<00:01, 7444.72it/s] 15%|█▍        | 1493/10000 [00:00<00:01, 7460.25it/s] 22%|██▏       | 2240/10000 [00:00<00:01, 7373.13it/s] 30%|██▉       | 2978/10000 [00:00<00:00, 7375.70it/s] 37%|███▋      | 3721/10000 [00:00<00:00, 7395.06it/s] 45%|████▍     | 4464/10000 [00:00<00:00, 7406.35it/s] 52%|█████▏    | 5210/10000 [00:00<00:00, 7421.05it/s] 60%|█████▉    | 5953/10000 [00:00<00:00, 7419.96it/s] 67%|██████▋   | 6696/10000 [00:00<00:00, 7421.47it/s] 74%|███████▍  | 7439/10000 [00:01<00:00, 7416.40it/s] 82%|████████▏ | 8182/10000 [00:01<00:00, 7418.53it/s] 89%|████████▉ | 8924/10000 [00:01<00:00, 7331.91it/s] 97%|█████████▋| 9658/10000 [00:01<00:00, 7328.44it/s]100%|██████████| 10000/10000 [00:01<00:00, 7389.41it/s]
2022-05-05 04:53:28 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 04:53:28 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [54:48<?, ?it/s]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 55, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 145, in run_synthesizer
    scoring_fn=scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 77, in prune_heuristics
    L_temp_train = self.apply_heuristics(heuristics[i], self.train_primitive_matrix, feat_combos[i], beta_opt_temp) 
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 50, in apply_heuristics
    L = np.zeros((np.shape(primitive_matrix)[0],len(heuristics)))
numpy.core._exceptions.MemoryError: Unable to allocate 261. GiB for an array with shape (57000, 613872) and data type float64
