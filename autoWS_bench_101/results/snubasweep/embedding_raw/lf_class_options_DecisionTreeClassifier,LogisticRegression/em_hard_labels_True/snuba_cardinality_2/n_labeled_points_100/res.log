/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 04:04:36 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 735/57000 [00:00<00:07, 7345.56it/s]  3%|▎         | 1475/57000 [00:00<00:07, 7374.58it/s]  4%|▍         | 2219/57000 [00:00<00:07, 7402.43it/s]  5%|▌         | 2965/57000 [00:00<00:07, 7422.46it/s]  7%|▋         | 3708/57000 [00:00<00:07, 7188.38it/s]  8%|▊         | 4434/57000 [00:00<00:07, 7209.15it/s]  9%|▉         | 5173/57000 [00:00<00:07, 7265.16it/s] 10%|█         | 5908/57000 [00:00<00:07, 7291.07it/s] 12%|█▏        | 6651/57000 [00:00<00:06, 7332.32it/s] 13%|█▎        | 7392/57000 [00:01<00:06, 7353.77it/s] 14%|█▍        | 8137/57000 [00:01<00:06, 7381.70it/s] 16%|█▌        | 8881/57000 [00:01<00:06, 7398.38it/s] 17%|█▋        | 9625/57000 [00:01<00:06, 7408.44it/s] 18%|█▊        | 10372/57000 [00:01<00:06, 7424.26it/s] 20%|█▉        | 11120/57000 [00:01<00:06, 7439.19it/s] 21%|██        | 11866/57000 [00:01<00:06, 7443.83it/s] 22%|██▏       | 12612/57000 [00:01<00:05, 7445.84it/s] 23%|██▎       | 13357/57000 [00:01<00:05, 7435.28it/s] 25%|██▍       | 14101/57000 [00:01<00:05, 7425.07it/s] 26%|██▌       | 14845/57000 [00:02<00:05, 7427.70it/s] 27%|██▋       | 15590/57000 [00:02<00:05, 7432.26it/s] 29%|██▊       | 16334/57000 [00:02<00:05, 7432.44it/s] 30%|██▉       | 17078/57000 [00:02<00:05, 7297.70it/s] 31%|███▏      | 17821/57000 [00:02<00:05, 7336.75it/s] 33%|███▎      | 18568/57000 [00:02<00:05, 7375.79it/s] 34%|███▍      | 19312/57000 [00:02<00:05, 7392.64it/s] 35%|███▌      | 20056/57000 [00:02<00:04, 7405.05it/s] 36%|███▋      | 20797/57000 [00:02<00:04, 7397.09it/s] 38%|███▊      | 21537/57000 [00:02<00:04, 7350.22it/s] 39%|███▉      | 22279/57000 [00:03<00:04, 7369.39it/s] 40%|████      | 23020/57000 [00:03<00:04, 7380.83it/s] 42%|████▏     | 23762/57000 [00:03<00:04, 7391.56it/s] 43%|████▎     | 24505/57000 [00:03<00:04, 7402.59it/s] 44%|████▍     | 25247/57000 [00:03<00:04, 7404.50it/s] 46%|████▌     | 25990/57000 [00:03<00:04, 7410.89it/s] 47%|████▋     | 26732/57000 [00:03<00:04, 7292.08it/s] 48%|████▊     | 27462/57000 [00:03<00:04, 7126.58it/s] 49%|████▉     | 28204/57000 [00:03<00:03, 7210.27it/s] 51%|█████     | 28951/57000 [00:03<00:03, 7285.21it/s] 52%|█████▏    | 29695/57000 [00:04<00:03, 7328.27it/s] 53%|█████▎    | 30438/57000 [00:04<00:03, 7358.03it/s] 55%|█████▍    | 31179/57000 [00:04<00:03, 7371.03it/s] 56%|█████▌    | 31920/57000 [00:04<00:03, 7379.80it/s] 57%|█████▋    | 32663/57000 [00:04<00:03, 7393.16it/s] 59%|█████▊    | 33410/57000 [00:04<00:03, 7416.01it/s] 60%|█████▉    | 34158/57000 [00:04<00:03, 7434.80it/s] 61%|██████    | 34909/57000 [00:04<00:02, 7457.20it/s] 63%|██████▎   | 35655/57000 [00:04<00:02, 7452.04it/s] 64%|██████▍   | 36401/57000 [00:04<00:02, 7451.56it/s] 65%|██████▌   | 37150/57000 [00:05<00:02, 7461.44it/s] 66%|██████▋   | 37899/57000 [00:05<00:02, 7468.88it/s] 68%|██████▊   | 38646/57000 [00:05<00:02, 7465.47it/s] 69%|██████▉   | 39393/57000 [00:05<00:02, 7463.86it/s] 70%|███████   | 40140/57000 [00:05<00:02, 7450.86it/s] 72%|███████▏  | 40887/57000 [00:05<00:02, 7454.94it/s] 73%|███████▎  | 41634/57000 [00:05<00:02, 7458.30it/s] 74%|███████▍  | 42380/57000 [00:05<00:01, 7456.21it/s] 76%|███████▌  | 43126/57000 [00:05<00:01, 7439.25it/s] 77%|███████▋  | 43871/57000 [00:05<00:01, 7441.38it/s] 78%|███████▊  | 44616/57000 [00:06<00:01, 7442.38it/s] 80%|███████▉  | 45361/57000 [00:06<00:01, 7441.10it/s] 81%|████████  | 46112/57000 [00:06<00:01, 7459.78it/s] 82%|████████▏ | 46862/57000 [00:06<00:01, 7471.67it/s] 84%|████████▎ | 47613/57000 [00:06<00:01, 7480.99it/s] 85%|████████▍ | 48363/57000 [00:06<00:01, 7485.50it/s] 86%|████████▌ | 49112/57000 [00:06<00:01, 7479.06it/s] 87%|████████▋ | 49860/57000 [00:06<00:00, 7476.01it/s] 89%|████████▉ | 50608/57000 [00:06<00:00, 7470.90it/s] 90%|█████████ | 51356/57000 [00:06<00:00, 7463.12it/s] 91%|█████████▏| 52104/57000 [00:07<00:00, 7467.13it/s] 93%|█████████▎| 52852/57000 [00:07<00:00, 7469.50it/s] 94%|█████████▍| 53601/57000 [00:07<00:00, 7473.04it/s] 95%|█████████▌| 54350/57000 [00:07<00:00, 7475.27it/s] 97%|█████████▋| 55100/57000 [00:07<00:00, 7480.74it/s] 98%|█████████▊| 55849/57000 [00:07<00:00, 7470.87it/s] 99%|█████████▉| 56597/57000 [00:07<00:00, 7466.37it/s]100%|██████████| 57000/57000 [00:07<00:00, 7407.30it/s]
2022-05-05 04:04:44 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 748/3000 [00:00<00:00, 7472.49it/s] 50%|█████     | 1500/3000 [00:00<00:00, 7498.12it/s] 75%|███████▌  | 2256/3000 [00:00<00:00, 7522.30it/s]100%|██████████| 3000/3000 [00:00<00:00, 7518.55it/s]
2022-05-05 04:04:44 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 749/10000 [00:00<00:01, 7489.79it/s] 15%|█▌        | 1501/10000 [00:00<00:01, 7502.58it/s] 23%|██▎       | 2252/10000 [00:00<00:01, 7504.31it/s] 30%|███       | 3004/10000 [00:00<00:00, 7507.74it/s] 38%|███▊      | 3755/10000 [00:00<00:00, 7508.26it/s] 45%|████▌     | 4507/10000 [00:00<00:00, 7509.08it/s] 53%|█████▎    | 5259/10000 [00:00<00:00, 7510.24it/s] 60%|██████    | 6011/10000 [00:00<00:00, 7508.45it/s] 68%|██████▊   | 6763/10000 [00:00<00:00, 7509.18it/s] 75%|███████▌  | 7514/10000 [00:01<00:00, 7508.07it/s] 83%|████████▎ | 8265/10000 [00:01<00:00, 7498.86it/s] 90%|█████████ | 9015/10000 [00:01<00:00, 7491.77it/s] 98%|█████████▊| 9766/10000 [00:01<00:00, 7495.42it/s]100%|██████████| 10000/10000 [00:01<00:00, 7501.94it/s]
2022-05-05 04:04:48 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 04:04:48 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [47:18<?, ?it/s]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 55, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 145, in run_synthesizer
    scoring_fn=scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 77, in prune_heuristics
    L_temp_train = self.apply_heuristics(heuristics[i], self.train_primitive_matrix, feat_combos[i], beta_opt_temp) 
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 50, in apply_heuristics
    L = np.zeros((np.shape(primitive_matrix)[0],len(heuristics)))
numpy.core._exceptions.MemoryError: Unable to allocate 261. GiB for an array with shape (57000, 613872) and data type float64
