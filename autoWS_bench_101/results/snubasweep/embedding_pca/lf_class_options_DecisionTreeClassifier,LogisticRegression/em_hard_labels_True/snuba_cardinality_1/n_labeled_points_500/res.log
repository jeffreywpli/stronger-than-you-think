/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 10:10:20 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 730/57000 [00:00<00:07, 7294.77it/s]  3%|▎         | 1468/57000 [00:00<00:07, 7339.05it/s]  4%|▍         | 2206/57000 [00:00<00:07, 7353.98it/s]  5%|▌         | 2948/57000 [00:00<00:07, 7378.50it/s]  6%|▋         | 3688/57000 [00:00<00:07, 7385.28it/s]  8%|▊         | 4428/57000 [00:00<00:07, 7388.71it/s]  9%|▉         | 5167/57000 [00:00<00:07, 7384.55it/s] 10%|█         | 5908/57000 [00:00<00:06, 7390.88it/s] 12%|█▏        | 6651/57000 [00:00<00:06, 7400.11it/s] 13%|█▎        | 7393/57000 [00:01<00:06, 7404.36it/s] 14%|█▍        | 8134/57000 [00:01<00:06, 7385.39it/s] 16%|█▌        | 8875/57000 [00:01<00:06, 7391.75it/s] 17%|█▋        | 9615/57000 [00:01<00:06, 7393.94it/s] 18%|█▊        | 10355/57000 [00:01<00:06, 7380.59it/s] 19%|█▉        | 11095/57000 [00:01<00:06, 7385.33it/s] 21%|██        | 11836/57000 [00:01<00:06, 7392.12it/s] 22%|██▏       | 12576/57000 [00:01<00:06, 7393.22it/s] 23%|██▎       | 13316/57000 [00:01<00:05, 7393.97it/s] 25%|██▍       | 14059/57000 [00:01<00:05, 7402.17it/s] 26%|██▌       | 14800/57000 [00:02<00:05, 7397.57it/s] 27%|██▋       | 15540/57000 [00:02<00:05, 7397.21it/s] 29%|██▊       | 16280/57000 [00:02<00:05, 7394.00it/s] 30%|██▉       | 17020/57000 [00:02<00:05, 7387.96it/s] 31%|███       | 17765/57000 [00:02<00:05, 7406.43it/s] 32%|███▏      | 18507/57000 [00:02<00:05, 7408.37it/s] 34%|███▍      | 19248/57000 [00:02<00:05, 7396.31it/s] 35%|███▌      | 19988/57000 [00:02<00:05, 7389.27it/s] 36%|███▋      | 20728/57000 [00:02<00:04, 7389.56it/s] 38%|███▊      | 21467/57000 [00:02<00:04, 7386.75it/s] 39%|███▉      | 22206/57000 [00:03<00:04, 7335.09it/s] 40%|████      | 22942/57000 [00:03<00:04, 7341.92it/s] 42%|████▏     | 23680/57000 [00:03<00:04, 7351.40it/s] 43%|████▎     | 24417/57000 [00:03<00:04, 7354.78it/s] 44%|████▍     | 25157/57000 [00:03<00:04, 7366.03it/s] 45%|████▌     | 25897/57000 [00:03<00:04, 7374.28it/s] 47%|████▋     | 26637/57000 [00:03<00:04, 7380.23it/s] 48%|████▊     | 27378/57000 [00:03<00:04, 7386.39it/s] 49%|████▉     | 28121/57000 [00:03<00:03, 7398.45it/s] 51%|█████     | 28867/57000 [00:03<00:03, 7414.22it/s] 52%|█████▏    | 29609/57000 [00:04<00:03, 7409.23it/s] 53%|█████▎    | 30350/57000 [00:04<00:03, 7400.19it/s] 55%|█████▍    | 31091/57000 [00:04<00:03, 7399.06it/s] 56%|█████▌    | 31832/57000 [00:04<00:03, 7401.03it/s] 57%|█████▋    | 32573/57000 [00:04<00:03, 7401.94it/s] 58%|█████▊    | 33314/57000 [00:04<00:03, 7401.49it/s] 60%|█████▉    | 34055/57000 [00:04<00:03, 7399.75it/s] 61%|██████    | 34795/57000 [00:04<00:03, 7394.40it/s] 62%|██████▏   | 35535/57000 [00:04<00:02, 7389.32it/s] 64%|██████▎   | 36274/57000 [00:04<00:02, 7384.20it/s] 65%|██████▍   | 37013/57000 [00:05<00:02, 7376.45it/s] 66%|██████▌   | 37754/57000 [00:05<00:02, 7385.03it/s] 68%|██████▊   | 38495/57000 [00:05<00:02, 7392.18it/s] 69%|██████▉   | 39237/57000 [00:05<00:02, 7399.78it/s] 70%|███████   | 39977/57000 [00:05<00:02, 7386.68it/s] 71%|███████▏  | 40716/57000 [00:05<00:02, 7381.04it/s] 73%|███████▎  | 41455/57000 [00:05<00:02, 7379.12it/s] 74%|███████▍  | 42193/57000 [00:05<00:02, 7377.97it/s] 75%|███████▌  | 42934/57000 [00:05<00:01, 7384.85it/s] 77%|███████▋  | 43675/57000 [00:05<00:01, 7390.72it/s] 78%|███████▊  | 44416/57000 [00:06<00:01, 7394.83it/s] 79%|███████▉  | 45156/57000 [00:06<00:01, 7388.52it/s] 81%|████████  | 45902/57000 [00:06<00:01, 7407.62it/s] 82%|████████▏ | 46646/57000 [00:06<00:01, 7415.98it/s] 83%|████████▎ | 47388/57000 [00:06<00:01, 7410.97it/s] 84%|████████▍ | 48130/57000 [00:06<00:01, 7408.74it/s] 86%|████████▌ | 48873/57000 [00:06<00:01, 7413.06it/s] 87%|████████▋ | 49615/57000 [00:06<00:00, 7413.37it/s] 88%|████████▊ | 50359/57000 [00:06<00:00, 7418.98it/s] 90%|████████▉ | 51101/57000 [00:06<00:00, 7412.77it/s] 91%|█████████ | 51845/57000 [00:07<00:00, 7419.69it/s] 92%|█████████▏| 52587/57000 [00:07<00:00, 7413.31it/s] 94%|█████████▎| 53329/57000 [00:07<00:00, 7409.03it/s] 95%|█████████▍| 54071/57000 [00:07<00:00, 7410.61it/s] 96%|█████████▌| 54814/57000 [00:07<00:00, 7416.35it/s] 97%|█████████▋| 55556/57000 [00:07<00:00, 7353.89it/s] 99%|█████████▉| 56299/57000 [00:07<00:00, 7375.81it/s]100%|██████████| 57000/57000 [00:07<00:00, 7391.28it/s]
2022-05-05 10:10:27 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 744/3000 [00:00<00:00, 7439.21it/s] 50%|████▉     | 1494/3000 [00:00<00:00, 7471.64it/s] 75%|███████▍  | 2248/3000 [00:00<00:00, 7498.74it/s]100%|█████████▉| 2998/3000 [00:00<00:00, 7493.47it/s]100%|██████████| 3000/3000 [00:00<00:00, 7485.76it/s]
2022-05-05 10:10:28 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 742/10000 [00:00<00:01, 7418.03it/s] 15%|█▍        | 1485/10000 [00:00<00:01, 7423.40it/s] 22%|██▏       | 2228/10000 [00:00<00:01, 7417.01it/s] 30%|██▉       | 2970/10000 [00:00<00:00, 7414.55it/s] 37%|███▋      | 3712/10000 [00:00<00:00, 7409.77it/s] 45%|████▍     | 4453/10000 [00:00<00:00, 7408.74it/s] 52%|█████▏    | 5194/10000 [00:00<00:00, 7399.33it/s] 59%|█████▉    | 5935/10000 [00:00<00:00, 7402.27it/s] 67%|██████▋   | 6676/10000 [00:00<00:00, 7404.56it/s] 74%|███████▍  | 7417/10000 [00:01<00:00, 7399.24it/s] 82%|████████▏ | 8157/10000 [00:01<00:00, 7395.24it/s] 89%|████████▉ | 8897/10000 [00:01<00:00, 7390.25it/s] 96%|█████████▋| 9637/10000 [00:01<00:00, 7392.84it/s]100%|██████████| 10000/10000 [00:01<00:00, 7401.03it/s]
(67500, 784)
2022-05-05 10:10:33 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 10:10:33 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:02<00:53,  2.43s/it]  9%|▊         | 2/23 [00:04<00:52,  2.48s/it] 13%|█▎        | 3/23 [00:07<00:50,  2.54s/it] 17%|█▋        | 4/23 [00:10<00:49,  2.59s/it] 22%|██▏       | 5/23 [00:13<00:47,  2.66s/it] 26%|██▌       | 6/23 [00:15<00:45,  2.70s/it] 30%|███       | 7/23 [00:18<00:44,  2.77s/it] 35%|███▍      | 8/23 [00:21<00:42,  2.83s/it] 39%|███▉      | 9/23 [00:24<00:40,  2.91s/it] 43%|████▎     | 10/23 [00:27<00:38,  2.99s/it] 48%|████▊     | 11/23 [00:31<00:36,  3.07s/it] 52%|█████▏    | 12/23 [00:34<00:34,  3.16s/it] 57%|█████▋    | 13/23 [00:37<00:32,  3.25s/it] 61%|██████    | 14/23 [00:41<00:30,  3.35s/it] 65%|██████▌   | 15/23 [00:45<00:27,  3.46s/it] 70%|██████▉   | 16/23 [00:49<00:25,  3.58s/it] 74%|███████▍  | 17/23 [00:53<00:22,  3.72s/it] 78%|███████▊  | 18/23 [00:57<00:19,  3.84s/it] 83%|████████▎ | 19/23 [01:01<00:15,  3.98s/it] 87%|████████▋ | 20/23 [01:06<00:12,  4.11s/it] 91%|█████████▏| 21/23 [01:10<00:08,  4.27s/it] 96%|█████████▌| 22/23 [01:15<00:04,  4.49s/it]100%|██████████| 23/23 [01:20<00:00,  4.67s/it]100%|██████████| 23/23 [01:20<00:00,  3.51s/it]
Fitting MulticlassAdaptor... Class 1
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:02<00:53,  2.43s/it]  9%|▊         | 2/23 [00:04<00:52,  2.49s/it] 13%|█▎        | 3/23 [00:07<00:50,  2.55s/it] 17%|█▋        | 4/23 [00:10<00:49,  2.60s/it] 22%|██▏       | 5/23 [00:13<00:47,  2.65s/it] 26%|██▌       | 6/23 [00:15<00:46,  2.72s/it] 30%|███       | 7/23 [00:18<00:44,  2.79s/it] 35%|███▍      | 8/23 [00:21<00:42,  2.84s/it] 39%|███▉      | 9/23 [00:24<00:40,  2.93s/it] 43%|████▎     | 10/23 [00:28<00:38,  3.00s/it] 48%|████▊     | 11/23 [00:31<00:37,  3.08s/it] 52%|█████▏    | 12/23 [00:34<00:34,  3.16s/it] 57%|█████▋    | 13/23 [00:38<00:32,  3.26s/it] 61%|██████    | 14/23 [00:41<00:30,  3.35s/it] 65%|██████▌   | 15/23 [00:45<00:27,  3.48s/it] 65%|██████▌   | 15/23 [00:45<00:24,  3.03s/it]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 59, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 143, in run_synthesizer
    hf, feat_combos = self.syn.generate_heuristics(model, max_cardinality)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 87, in generate_heuristics
    heuristics.append(self.fit_function(comb, classifier))
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 68, in fit_function
    clf.fit(X, self.val_ground)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1376, in fit
    " class: %r" % classes_[0])
ValueError: This solver needs samples of at least 2 classes in the data, but the data contains only one class: -1
