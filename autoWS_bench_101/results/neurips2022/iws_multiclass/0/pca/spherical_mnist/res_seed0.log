/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:62: UserWarning: train_data has been renamed data
  warnings.warn("train_data has been renamed data")
/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:52: UserWarning: train_labels has been renamed targets
  warnings.warn("train_labels has been renamed targets")
/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:67: UserWarning: test_data has been renamed data
  warnings.warn("test_data has been renamed data")
/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:57: UserWarning: test_labels has been renamed targets
  warnings.warn("test_labels has been renamed targets")
getting mnist data
projecting train data set
500/600001000/600001500/600002000/600002500/600003000/600003500/600004000/600004500/600005000/600005500/600006000/600006500/600007000/600007500/600008000/600008500/600009000/600009500/6000010000/6000010500/6000011000/6000011500/6000012000/6000012500/6000013000/6000013500/6000014000/6000014500/6000015000/6000015500/6000016000/6000016500/6000017000/6000017500/6000018000/6000018500/6000019000/6000019500/6000020000/6000020500/6000021000/6000021500/6000022000/6000022500/6000023000/6000023500/6000024000/6000024500/6000025000/6000025500/6000026000/6000026500/6000027000/6000027500/6000028000/6000028500/6000029000/6000029500/6000030000/6000030500/6000031000/6000031500/6000032000/6000032500/6000033000/6000033500/6000034000/6000034500/6000035000/6000035500/6000036000/6000036500/6000037000/6000037500/6000038000/6000038500/6000039000/6000039500/6000040000/6000040500/6000041000/6000041500/6000042000/6000042500/6000043000/6000043500/6000044000/6000044500/6000045000/6000045500/6000046000/6000046500/6000047000/6000047500/6000048000/6000048500/6000049000/6000049500/6000050000/6000050500/6000051000/6000051500/6000052000/6000052500/6000053000/6000053500/6000054000/6000054500/6000055000/6000055500/6000056000/6000056500/6000057000/6000057500/6000058000/6000058500/6000059000/6000059500/6000060000/60000
projecting test data set
500/100001000/100001500/100002000/100002500/100003000/100003500/100004000/100004500/100005000/100005500/100006000/100006500/100007000/100007500/100008000/100008500/100009000/100009500/1000010000/10000
writing pickle
done
getting mnist data
projecting train data set
500/600001000/600001500/600002000/600002500/600003000/600003500/600004000/600004500/600005000/600005500/600006000/600006500/600007000/600007500/600008000/600008500/600009000/600009500/6000010000/6000010500/6000011000/6000011500/6000012000/6000012500/6000013000/6000013500/6000014000/6000014500/6000015000/6000015500/6000016000/6000016500/6000017000/6000017500/6000018000/6000018500/6000019000/6000019500/6000020000/6000020500/6000021000/6000021500/6000022000/6000022500/6000023000/6000023500/6000024000/6000024500/6000025000/6000025500/6000026000/6000026500/6000027000/6000027500/6000028000/6000028500/6000029000/6000029500/6000030000/6000030500/6000031000/6000031500/6000032000/6000032500/6000033000/6000033500/6000034000/6000034500/6000035000/6000035500/6000036000/6000036500/6000037000/6000037500/6000038000/6000038500/6000039000/6000039500/6000040000/6000040500/6000041000/6000041500/6000042000/6000042500/6000043000/6000043500/6000044000/6000044500/6000045000/6000045500/6000046000/6000046500/6000047000/6000047500/6000048000/6000048500/6000049000/6000049500/6000050000/6000050500/6000051000/6000051500/6000052000/6000052500/6000053000/6000053500/6000054000/6000054500/6000055000/6000055500/6000056000/6000056500/6000057000/6000057500/6000058000/6000058500/6000059000/6000059500/6000060000/60000
projecting test data set
500/100001000/100001500/100002000/100002500/100003000/100003500/100004000/100004500/100005000/100005500/100006000/100006500/100007000/100007500/100008000/100008500/100009000/100009500/1000010000/10000
writing pickle
done
getting mnist data
projecting train data set
500/600001000/600001500/600002000/600002500/600003000/600003500/600004000/600004500/600005000/600005500/600006000/600006500/600007000/600007500/600008000/600008500/600009000/600009500/6000010000/6000010500/6000011000/6000011500/6000012000/6000012500/6000013000/6000013500/6000014000/6000014500/6000015000/6000015500/6000016000/6000016500/6000017000/6000017500/6000018000/6000018500/6000019000/6000019500/6000020000/6000020500/6000021000/6000021500/6000022000/6000022500/6000023000/6000023500/6000024000/6000024500/6000025000/6000025500/6000026000/6000026500/6000027000/6000027500/6000028000/6000028500/6000029000/6000029500/6000030000/6000030500/6000031000/6000031500/6000032000/6000032500/6000033000/6000033500/6000034000/6000034500/6000035000/6000035500/6000036000/6000036500/6000037000/6000037500/6000038000/6000038500/6000039000/6000039500/6000040000/6000040500/6000041000/6000041500/6000042000/6000042500/6000043000/6000043500/6000044000/6000044500/6000045000/6000045500/6000046000/6000046500/6000047000/6000047500/6000048000/6000048500/6000049000/6000049500/6000050000/6000050500/6000051000/6000051500/6000052000/6000052500/6000053000/6000053500/6000054000/6000054500/6000055000/6000055500/6000056000/6000056500/6000057000/6000057500/6000058000/6000058500/6000059000/6000059500/6000060000/60000
projecting test data set
500/100001000/100001500/100002000/100002500/100003000/100003500/100004000/100004500/100005000/100005500/100006000/100006500/100007000/100007500/100008000/100008500/100009000/100009500/1000010000/10000
writing pickle
done
2022-08-09 04:20:45 - loading data from datasets/SphericalMNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|          | 684/57000 [00:00<00:08, 6839.16it/s]  2%|▏         | 1368/57000 [00:00<00:08, 6738.64it/s]  4%|▎         | 2057/57000 [00:00<00:08, 6803.48it/s]  5%|▍         | 2738/57000 [00:00<00:07, 6793.23it/s]  6%|▌         | 3418/57000 [00:00<00:07, 6787.96it/s]  7%|▋         | 4097/57000 [00:00<00:07, 6751.88it/s]  8%|▊         | 4773/57000 [00:00<00:07, 6679.62it/s] 10%|▉         | 5442/57000 [00:00<00:07, 6620.53it/s] 11%|█         | 6105/57000 [00:00<00:07, 6602.88it/s] 12%|█▏        | 6766/57000 [00:01<00:07, 6520.72it/s] 13%|█▎        | 7419/57000 [00:01<00:07, 6498.67it/s] 14%|█▍        | 8102/57000 [00:01<00:07, 6596.33it/s] 15%|█▌        | 8781/57000 [00:01<00:07, 6651.56it/s] 17%|█▋        | 9460/57000 [00:01<00:07, 6690.34it/s] 18%|█▊        | 10130/57000 [00:01<00:07, 6664.78it/s] 19%|█▉        | 10797/57000 [00:01<00:06, 6656.63it/s] 20%|██        | 11471/57000 [00:01<00:06, 6679.82it/s] 21%|██▏       | 12154/57000 [00:01<00:06, 6723.65it/s] 23%|██▎       | 12836/57000 [00:01<00:06, 6749.86it/s] 24%|██▎       | 13516/57000 [00:02<00:06, 6762.84it/s] 25%|██▍       | 14201/57000 [00:02<00:06, 6788.63it/s] 26%|██▌       | 14881/57000 [00:02<00:06, 6789.92it/s] 27%|██▋       | 15567/57000 [00:02<00:06, 6810.03it/s] 29%|██▊       | 16256/57000 [00:02<00:05, 6832.68it/s] 30%|██▉       | 16940/57000 [00:02<00:05, 6826.14it/s] 31%|███       | 17623/57000 [00:02<00:05, 6693.84it/s] 32%|███▏      | 18351/57000 [00:02<00:05, 6864.78it/s] 33%|███▎      | 19039/57000 [00:02<00:05, 6836.47it/s] 35%|███▍      | 19748/57000 [00:02<00:05, 6909.24it/s] 36%|███▌      | 20440/57000 [00:03<00:05, 6805.96it/s] 37%|███▋      | 21151/57000 [00:03<00:05, 6894.19it/s] 38%|███▊      | 21841/57000 [00:03<00:05, 6885.95it/s] 40%|███▉      | 22530/57000 [00:03<00:05, 6858.49it/s] 41%|████      | 23218/57000 [00:03<00:04, 6864.81it/s] 42%|████▏     | 23931/57000 [00:03<00:04, 6942.02it/s] 43%|████▎     | 24626/57000 [00:03<00:04, 6916.56it/s] 44%|████▍     | 25329/57000 [00:03<00:04, 6948.39it/s] 46%|████▌     | 26025/57000 [00:03<00:04, 6949.50it/s] 47%|████▋     | 26721/57000 [00:03<00:04, 6942.77it/s] 48%|████▊     | 27432/57000 [00:04<00:04, 6991.67it/s] 49%|████▉     | 28132/57000 [00:04<00:04, 6952.82it/s] 51%|█████     | 28828/57000 [00:04<00:04, 6952.27it/s] 52%|█████▏    | 29535/57000 [00:04<00:03, 6987.17it/s] 53%|█████▎    | 30234/57000 [00:04<00:03, 6941.14it/s] 54%|█████▍    | 30938/57000 [00:04<00:03, 6969.73it/s] 56%|█████▌    | 31637/57000 [00:04<00:03, 6973.48it/s] 57%|█████▋    | 32335/57000 [00:04<00:03, 6948.63it/s] 58%|█████▊    | 33039/57000 [00:04<00:03, 6974.06it/s] 59%|█████▉    | 33737/57000 [00:04<00:03, 6960.14it/s] 60%|██████    | 34434/57000 [00:05<00:03, 6951.21it/s] 62%|██████▏   | 35137/57000 [00:05<00:03, 6974.63it/s] 63%|██████▎   | 35835/57000 [00:05<00:03, 6948.14it/s] 64%|██████▍   | 36530/57000 [00:05<00:02, 6906.78it/s] 65%|██████▌   | 37221/57000 [00:05<00:02, 6847.52it/s] 67%|██████▋   | 37906/57000 [00:05<00:02, 6811.78it/s] 68%|██████▊   | 38631/57000 [00:05<00:02, 6939.71it/s] 69%|██████▉   | 39332/57000 [00:05<00:02, 6957.95it/s] 70%|███████   | 40042/57000 [00:05<00:02, 6999.04it/s] 71%|███████▏  | 40750/57000 [00:05<00:02, 7021.98it/s] 73%|███████▎  | 41455/57000 [00:06<00:02, 7029.14it/s] 74%|███████▍  | 42183/57000 [00:06<00:02, 7102.50it/s] 75%|███████▌  | 42894/57000 [00:06<00:02, 6970.67it/s] 76%|███████▋  | 43605/57000 [00:06<00:01, 7010.67it/s] 78%|███████▊  | 44307/57000 [00:06<00:01, 7012.90it/s] 79%|███████▉  | 45012/57000 [00:06<00:01, 7021.90it/s] 80%|████████  | 45729/57000 [00:06<00:01, 7064.17it/s] 81%|████████▏ | 46436/57000 [00:06<00:01, 7021.60it/s] 83%|████████▎ | 47145/57000 [00:06<00:01, 7041.89it/s] 84%|████████▍ | 47850/57000 [00:06<00:01, 7021.84it/s] 85%|████████▌ | 48553/57000 [00:07<00:01, 6962.16it/s] 86%|████████▋ | 49252/57000 [00:07<00:01, 6967.76it/s] 88%|████████▊ | 49949/57000 [00:07<00:01, 6938.00it/s] 89%|████████▉ | 50643/57000 [00:07<00:00, 6860.22it/s] 90%|█████████ | 51353/57000 [00:07<00:00, 6928.43it/s] 91%|█████████▏| 52047/57000 [00:07<00:00, 6911.43it/s] 93%|█████████▎| 52739/57000 [00:07<00:00, 6761.77it/s] 94%|█████████▎| 53426/57000 [00:07<00:00, 6792.99it/s] 95%|█████████▍| 54106/57000 [00:07<00:00, 6785.92it/s] 96%|█████████▌| 54785/57000 [00:07<00:00, 6753.33it/s] 97%|█████████▋| 55461/57000 [00:08<00:00, 6731.84it/s] 99%|█████████▊| 56149/57000 [00:08<00:00, 6775.57it/s]100%|█████████▉| 56827/57000 [00:08<00:00, 6747.78it/s]100%|██████████| 57000/57000 [00:08<00:00, 6857.10it/s]
2022-08-09 04:20:54 - loading data from datasets/SphericalMNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 23%|██▎       | 684/3000 [00:00<00:00, 6833.72it/s] 46%|████▌     | 1368/3000 [00:00<00:00, 6771.02it/s] 68%|██████▊   | 2054/3000 [00:00<00:00, 6807.12it/s] 91%|█████████▏| 2740/3000 [00:00<00:00, 6827.08it/s]100%|██████████| 3000/3000 [00:00<00:00, 6821.58it/s]
2022-08-09 04:20:54 - loading data from datasets/SphericalMNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 677/10000 [00:00<00:01, 6766.57it/s] 14%|█▎        | 1357/10000 [00:00<00:01, 6783.32it/s] 20%|██        | 2036/10000 [00:00<00:01, 6773.76it/s] 27%|██▋       | 2717/10000 [00:00<00:01, 6785.87it/s] 34%|███▍      | 3401/10000 [00:00<00:00, 6803.10it/s] 41%|████      | 4082/10000 [00:00<00:00, 6780.76it/s] 48%|████▊     | 4765/10000 [00:00<00:00, 6793.76it/s] 54%|█████▍    | 5447/10000 [00:00<00:00, 6799.69it/s] 61%|██████▏   | 6127/10000 [00:00<00:00, 6740.53it/s] 68%|██████▊   | 6802/10000 [00:01<00:00, 6728.75it/s] 75%|███████▍  | 7475/10000 [00:01<00:00, 6719.18it/s] 82%|████████▏ | 8162/10000 [00:01<00:00, 6761.89it/s] 88%|████████▊ | 8850/10000 [00:01<00:00, 6794.29it/s] 95%|█████████▌| 9536/10000 [00:01<00:00, 6812.93it/s]100%|██████████| 10000/10000 [00:01<00:00, 6787.29it/s](67100, 3600)
2022-08-09 04:21:30 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
|----------------------------------------------------------------------------------------------------|0.0% 0/20|█████-----------------------------------------------------------------------------------------------|5.0% 1/20|██████████------------------------------------------------------------------------------------------|10.0% 2/20|███████████████-------------------------------------------------------------------------------------|15.0% 3/20|----------------------------------------------------------------------------------------------------|0.0% 0/20|█████-----------------------------------------------------------------------------------------------|5.0% 1/20|██████████------------------------------------------------------------------------------------------|10.0% 2/20|███████████████-------------------------------------------------------------------------------------|15.0% 3/20|████████████████████--------------------------------------------------------------------------------|20.0% 4/20|█████████████████████████---------------------------------------------------------------------------|25.0% 5/20|██████████████████████████████----------------------------------------------------------------------|30.0% 6/20|███████████████████████████████████-----------------------------------------------------------------|35.0% 7/20|████████████████████████████████████████------------------------------------------------------------|40.0% 8/20|█████████████████████████████████████████████-------------------------------------------------------|45.0% 9/20|██████████████████████████████████████████████████--------------------------------------------------|50.0% 10/20|███████████████████████████████████████████████████████---------------------------------------------|55.0% 11/20|████████████████████████████████████████████████████████████----------------------------------------|60.0% 12/20|█████████████████████████████████████████████████████████████████-----------------------------------|65.0% 13/20|██████████████████████████████████████████████████████████████████████------------------------------|70.0% 14/20|███████████████████████████████████████████████████████████████████████████-------------------------|75.0% 15/20|████████████████████████████████████████████████████████████████████████████████--------------------|80.0% 16/20|█████████████████████████████████████████████████████████████████████████████████████---------------|85.0% 17/20|██████████████████████████████████████████████████████████████████████████████████████████----------|90.0% 18/20|███████████████████████████████████████████████████████████████████████████████████████████████-----|95.0% 19/20|████████████████████████████████████████████████████████████████████████████████████████████████████|100.0% 20/20

/hdd2/kaylee/AutoWS-Bench-101/fwrench/lf_selectors/interactive_multiclass/iws.py:152: SparseEfficiencyWarning: Comparing a sparse matrix with a nonzero scalar using != is inefficient, try using == instead.
  accuracy = evaluate_complex_multiclass(LFs, Ytrue, scoring_fn)
/hdd2/kaylee/AutoWS-Bench-101/fwrench/lf_selectors/interactive_multiclass/utils.py:635: RuntimeWarning: invalid value encountered in true_divide
  accuracy = (tp) / numvotes
  0%|          | 0/100 [00:00<?, ?epoch/s] 55%|█████▌    | 55/100 [00:00<00:00, 543.95epoch/s]100%|██████████| 100/100 [00:00<00:00, 641.09epoch/s]
2022-08-09 04:22:51 - [0.         0.         0.         0.06666667 0.10085026 0.37930175
 0.         0.00320102 0.00047472 0.46991474]
2022-08-09 04:22:51 - [train] accuracy: 0.0943, coverage: 0.7815
2022-08-09 04:22:51 - [0.         0.         0.         0.42857143 0.63636364 1.
 0.         0.         0.         1.        ]
2022-08-09 04:22:51 - [valid] accuracy: 0.4156, coverage: 0.7700
2022-08-09 04:22:52 - [0.         0.         0.         0.0313253  0.12451861 0.38028169
 0.         0.         0.         0.37288136]
2022-08-09 04:22:52 - [test] accuracy: 0.0819, coverage: 0.8288
2022-08-09 04:22:52 - label model train acc:    0.08192567567567567
2022-08-09 04:22:52 - label model coverage:     0.8288
0.08192567567567567
