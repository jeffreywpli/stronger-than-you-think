/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 06:54:27 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 729/57000 [00:00<00:07, 7280.18it/s]  3%|▎         | 1467/57000 [00:00<00:07, 7338.09it/s]  4%|▍         | 2206/57000 [00:00<00:07, 7361.71it/s]  5%|▌         | 2947/57000 [00:00<00:07, 7379.34it/s]  6%|▋         | 3687/57000 [00:00<00:07, 7383.52it/s]  8%|▊         | 4426/57000 [00:00<00:07, 7382.44it/s]  9%|▉         | 5167/57000 [00:00<00:07, 7389.81it/s] 10%|█         | 5906/57000 [00:00<00:06, 7389.60it/s] 12%|█▏        | 6646/57000 [00:00<00:06, 7391.44it/s] 13%|█▎        | 7388/57000 [00:01<00:06, 7397.44it/s] 14%|█▍        | 8128/57000 [00:01<00:06, 7330.89it/s] 16%|█▌        | 8870/57000 [00:01<00:06, 7357.33it/s] 17%|█▋        | 9613/57000 [00:01<00:06, 7376.58it/s] 18%|█▊        | 10355/57000 [00:01<00:06, 7388.01it/s] 19%|█▉        | 11095/57000 [00:01<00:06, 7389.42it/s] 21%|██        | 11838/57000 [00:01<00:06, 7399.52it/s] 22%|██▏       | 12583/57000 [00:01<00:05, 7412.04it/s] 23%|██▎       | 13325/57000 [00:01<00:05, 7412.42it/s] 25%|██▍       | 14069/57000 [00:01<00:05, 7420.15it/s] 26%|██▌       | 14812/57000 [00:02<00:05, 7419.30it/s] 27%|██▋       | 15554/57000 [00:02<00:05, 7419.39it/s] 29%|██▊       | 16297/57000 [00:02<00:05, 7421.68it/s] 30%|██▉       | 17040/57000 [00:02<00:05, 7421.50it/s] 31%|███       | 17783/57000 [00:02<00:05, 7417.62it/s] 32%|███▎      | 18525/57000 [00:02<00:05, 7415.51it/s] 34%|███▍      | 19267/57000 [00:02<00:05, 7410.92it/s] 35%|███▌      | 20010/57000 [00:02<00:04, 7415.60it/s] 36%|███▋      | 20753/57000 [00:02<00:04, 7419.59it/s] 38%|███▊      | 21495/57000 [00:02<00:04, 7350.59it/s] 39%|███▉      | 22231/57000 [00:03<00:04, 7349.48it/s] 40%|████      | 22972/57000 [00:03<00:04, 7364.53it/s] 42%|████▏     | 23712/57000 [00:03<00:04, 7374.91it/s] 43%|████▎     | 24453/57000 [00:03<00:04, 7384.74it/s] 44%|████▍     | 25192/57000 [00:03<00:04, 7382.58it/s] 45%|████▌     | 25931/57000 [00:03<00:04, 7361.22it/s] 47%|████▋     | 26668/57000 [00:03<00:04, 7350.04it/s] 48%|████▊     | 27404/57000 [00:03<00:04, 7340.53it/s] 49%|████▉     | 28139/57000 [00:03<00:03, 7331.78it/s] 51%|█████     | 28874/57000 [00:03<00:03, 7335.73it/s] 52%|█████▏    | 29610/57000 [00:04<00:03, 7341.54it/s] 53%|█████▎    | 30345/57000 [00:04<00:03, 7343.95it/s] 55%|█████▍    | 31080/57000 [00:04<00:03, 7338.21it/s] 56%|█████▌    | 31814/57000 [00:04<00:03, 7334.04it/s] 57%|█████▋    | 32552/57000 [00:04<00:03, 7347.13it/s] 58%|█████▊    | 33290/57000 [00:04<00:03, 7355.36it/s] 60%|█████▉    | 34030/57000 [00:04<00:03, 7368.63it/s] 61%|██████    | 34767/57000 [00:04<00:03, 7368.32it/s] 62%|██████▏   | 35506/57000 [00:04<00:02, 7373.10it/s] 64%|██████▎   | 36247/57000 [00:04<00:02, 7383.73it/s] 65%|██████▍   | 36986/57000 [00:05<00:02, 7377.29it/s] 66%|██████▌   | 37724/57000 [00:05<00:02, 7376.04it/s] 67%|██████▋   | 38462/57000 [00:05<00:02, 7375.33it/s] 69%|██████▉   | 39201/57000 [00:05<00:02, 7376.65it/s] 70%|███████   | 39939/57000 [00:05<00:02, 7367.40it/s] 71%|███████▏  | 40676/57000 [00:05<00:02, 7356.68it/s] 73%|███████▎  | 41415/57000 [00:05<00:02, 7366.39it/s] 74%|███████▍  | 42152/57000 [00:05<00:02, 7362.38it/s] 75%|███████▌  | 42889/57000 [00:05<00:01, 7360.39it/s] 77%|███████▋  | 43628/57000 [00:05<00:01, 7368.10it/s] 78%|███████▊  | 44365/57000 [00:06<00:01, 7359.46it/s] 79%|███████▉  | 45101/57000 [00:06<00:01, 7347.53it/s] 80%|████████  | 45837/57000 [00:06<00:01, 7351.11it/s] 82%|████████▏ | 46577/57000 [00:06<00:01, 7363.77it/s] 83%|████████▎ | 47314/57000 [00:06<00:01, 7362.13it/s] 84%|████████▍ | 48051/57000 [00:06<00:01, 7360.95it/s] 86%|████████▌ | 48790/57000 [00:06<00:01, 7367.23it/s] 87%|████████▋ | 49528/57000 [00:06<00:01, 7368.02it/s] 88%|████████▊ | 50265/57000 [00:06<00:00, 7368.38it/s] 89%|████████▉ | 51002/57000 [00:06<00:00, 7367.21it/s] 91%|█████████ | 51739/57000 [00:07<00:00, 7315.41it/s] 92%|█████████▏| 52477/57000 [00:07<00:00, 7331.97it/s] 93%|█████████▎| 53214/57000 [00:07<00:00, 7341.70it/s] 95%|█████████▍| 53949/57000 [00:07<00:00, 7341.86it/s] 96%|█████████▌| 54688/57000 [00:07<00:00, 7355.27it/s] 97%|█████████▋| 55427/57000 [00:07<00:00, 7363.90it/s] 99%|█████████▊| 56164/57000 [00:07<00:00, 7362.46it/s]100%|█████████▉| 56906/57000 [00:07<00:00, 7378.95it/s]100%|██████████| 57000/57000 [00:07<00:00, 7371.41it/s]
2022-05-05 06:54:35 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 737/3000 [00:00<00:00, 7360.29it/s] 49%|████▉     | 1482/3000 [00:00<00:00, 7411.92it/s] 74%|███████▍  | 2228/3000 [00:00<00:00, 7431.91it/s] 99%|█████████▉| 2972/3000 [00:00<00:00, 7434.56it/s]100%|██████████| 3000/3000 [00:00<00:00, 7422.89it/s]
2022-05-05 06:54:36 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 739/10000 [00:00<00:01, 7380.26it/s] 15%|█▍        | 1486/10000 [00:00<00:01, 7430.77it/s] 22%|██▏       | 2230/10000 [00:00<00:01, 7430.29it/s] 30%|██▉       | 2974/10000 [00:00<00:00, 7418.74it/s] 37%|███▋      | 3716/10000 [00:00<00:00, 7406.59it/s] 45%|████▍     | 4460/10000 [00:00<00:00, 7416.72it/s] 52%|█████▏    | 5202/10000 [00:00<00:00, 7382.06it/s] 59%|█████▉    | 5946/10000 [00:00<00:00, 7397.55it/s] 67%|██████▋   | 6686/10000 [00:00<00:00, 7319.57it/s] 74%|███████▍  | 7425/10000 [00:01<00:00, 7339.55it/s] 82%|████████▏ | 8163/10000 [00:01<00:00, 7351.24it/s] 89%|████████▉ | 8905/10000 [00:01<00:00, 7369.44it/s] 96%|█████████▋| 9645/10000 [00:01<00:00, 7377.94it/s]100%|██████████| 10000/10000 [00:01<00:00, 7382.60it/s]
2022-05-05 06:54:40 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 06:54:40 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:11<04:09, 11.36s/it]  4%|▍         | 1/23 [00:11<04:11, 11.45s/it]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 59, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 143, in run_synthesizer
    hf, feat_combos = self.syn.generate_heuristics(model, max_cardinality)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 87, in generate_heuristics
    heuristics.append(self.fit_function(comb, classifier))
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 68, in fit_function
    clf.fit(X, self.val_ground)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1376, in fit
    " class: %r" % classes_[0])
ValueError: This solver needs samples of at least 2 classes in the data, but the data contains only one class: 1
