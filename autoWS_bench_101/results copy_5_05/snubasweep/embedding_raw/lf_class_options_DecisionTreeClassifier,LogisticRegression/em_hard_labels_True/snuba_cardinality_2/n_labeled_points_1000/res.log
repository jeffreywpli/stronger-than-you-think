/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 05:49:26 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 736/57000 [00:00<00:07, 7350.35it/s]  3%|▎         | 1483/57000 [00:00<00:07, 7417.52it/s]  4%|▍         | 2229/57000 [00:00<00:07, 7435.62it/s]  5%|▌         | 2977/57000 [00:00<00:07, 7450.09it/s]  7%|▋         | 3726/57000 [00:00<00:07, 7461.19it/s]  8%|▊         | 4473/57000 [00:00<00:07, 7457.78it/s]  9%|▉         | 5219/57000 [00:00<00:06, 7450.12it/s] 10%|█         | 5965/57000 [00:00<00:06, 7449.87it/s] 12%|█▏        | 6710/57000 [00:00<00:06, 7447.68it/s] 13%|█▎        | 7472/57000 [00:01<00:06, 7498.52it/s] 14%|█▍        | 8228/57000 [00:01<00:06, 7516.61it/s] 16%|█▌        | 8985/57000 [00:01<00:06, 7530.47it/s] 17%|█▋        | 9742/57000 [00:01<00:06, 7539.78it/s] 18%|█▊        | 10497/57000 [00:01<00:06, 7541.34it/s] 20%|█▉        | 11252/57000 [00:01<00:06, 7532.50it/s] 21%|██        | 12006/57000 [00:01<00:05, 7532.19it/s] 22%|██▏       | 12760/57000 [00:01<00:05, 7529.81it/s] 24%|██▎       | 13515/57000 [00:01<00:05, 7534.70it/s] 25%|██▌       | 14269/57000 [00:01<00:05, 7534.44it/s] 26%|██▋       | 15023/57000 [00:02<00:05, 7533.80it/s] 28%|██▊       | 15777/57000 [00:02<00:05, 7527.14it/s] 29%|██▉       | 16530/57000 [00:02<00:05, 7516.20it/s] 30%|███       | 17283/57000 [00:02<00:05, 7518.92it/s] 32%|███▏      | 18037/57000 [00:02<00:05, 7523.57it/s] 33%|███▎      | 18790/57000 [00:02<00:05, 7518.16it/s] 34%|███▍      | 19543/57000 [00:02<00:04, 7518.71it/s] 36%|███▌      | 20295/57000 [00:02<00:04, 7458.90it/s] 37%|███▋      | 21041/57000 [00:02<00:04, 7430.94it/s] 38%|███▊      | 21785/57000 [00:02<00:04, 7412.22it/s] 40%|███▉      | 22527/57000 [00:03<00:04, 7407.68it/s] 41%|████      | 23270/57000 [00:03<00:04, 7412.27it/s] 42%|████▏     | 24013/57000 [00:03<00:04, 7416.76it/s] 43%|████▎     | 24756/57000 [00:03<00:04, 7420.49it/s] 45%|████▍     | 25500/57000 [00:03<00:04, 7425.43it/s] 46%|████▌     | 26243/57000 [00:03<00:04, 7425.02it/s] 47%|████▋     | 26988/57000 [00:03<00:04, 7431.46it/s] 49%|████▊     | 27733/57000 [00:03<00:03, 7434.81it/s] 50%|████▉     | 28477/57000 [00:03<00:03, 7433.07it/s] 51%|█████▏    | 29223/57000 [00:03<00:03, 7440.73it/s] 53%|█████▎    | 29968/57000 [00:04<00:03, 7440.86it/s] 54%|█████▍    | 30713/57000 [00:04<00:03, 7434.74it/s] 55%|█████▌    | 31458/57000 [00:04<00:03, 7436.74it/s] 56%|█████▋    | 32202/57000 [00:04<00:03, 7432.98it/s] 58%|█████▊    | 32946/57000 [00:04<00:03, 7428.13it/s] 59%|█████▉    | 33690/57000 [00:04<00:03, 7428.60it/s] 60%|██████    | 34433/57000 [00:04<00:03, 7422.00it/s] 62%|██████▏   | 35176/57000 [00:04<00:02, 7417.27it/s] 63%|██████▎   | 35918/57000 [00:04<00:02, 7393.89it/s] 64%|██████▍   | 36658/57000 [00:04<00:02, 7377.98it/s] 66%|██████▌   | 37399/57000 [00:05<00:02, 7386.92it/s] 67%|██████▋   | 38144/57000 [00:05<00:02, 7403.71it/s] 68%|██████▊   | 38894/57000 [00:05<00:02, 7429.64it/s] 70%|██████▉   | 39644/57000 [00:05<00:02, 7450.04it/s] 71%|███████   | 40390/57000 [00:05<00:02, 7447.03it/s] 72%|███████▏  | 41135/57000 [00:05<00:02, 7445.52it/s] 73%|███████▎  | 41880/57000 [00:05<00:02, 7436.51it/s] 75%|███████▍  | 42624/57000 [00:05<00:01, 7434.14it/s] 76%|███████▌  | 43371/57000 [00:05<00:01, 7442.70it/s] 77%|███████▋  | 44121/57000 [00:05<00:01, 7459.46it/s] 79%|███████▊  | 44868/57000 [00:06<00:01, 7460.82it/s] 80%|████████  | 45616/57000 [00:06<00:01, 7464.90it/s] 81%|████████▏ | 46371/57000 [00:06<00:01, 7489.97it/s] 83%|████████▎ | 47123/57000 [00:06<00:01, 7498.33it/s] 84%|████████▍ | 47873/57000 [00:06<00:01, 7487.53it/s] 85%|████████▌ | 48622/57000 [00:06<00:01, 7475.63it/s] 87%|████████▋ | 49370/57000 [00:06<00:01, 7467.18it/s] 88%|████████▊ | 50117/57000 [00:06<00:00, 7460.27it/s] 89%|████████▉ | 50864/57000 [00:06<00:00, 7450.13it/s] 91%|█████████ | 51610/57000 [00:06<00:00, 7452.69it/s] 92%|█████████▏| 52358/57000 [00:07<00:00, 7459.16it/s] 93%|█████████▎| 53104/57000 [00:07<00:00, 7457.43it/s] 94%|█████████▍| 53851/57000 [00:07<00:00, 7459.08it/s] 96%|█████████▌| 54597/57000 [00:07<00:00, 7454.87it/s] 97%|█████████▋| 55345/57000 [00:07<00:00, 7461.19it/s] 98%|█████████▊| 56092/57000 [00:07<00:00, 7449.90it/s]100%|█████████▉| 56837/57000 [00:07<00:00, 7449.47it/s]100%|██████████| 57000/57000 [00:07<00:00, 7459.69it/s]
2022-05-05 05:49:33 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 749/3000 [00:00<00:00, 7480.25it/s] 50%|█████     | 1501/3000 [00:00<00:00, 7501.27it/s] 75%|███████▌  | 2259/3000 [00:00<00:00, 7536.78it/s]100%|██████████| 3000/3000 [00:00<00:00, 7538.92it/s]
2022-05-05 05:49:34 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  8%|▊         | 754/10000 [00:00<00:01, 7538.70it/s] 15%|█▌        | 1510/10000 [00:00<00:01, 7545.46it/s] 23%|██▎       | 2265/10000 [00:00<00:01, 7537.87it/s] 30%|███       | 3020/10000 [00:00<00:00, 7539.17it/s] 38%|███▊      | 3775/10000 [00:00<00:00, 7540.46it/s] 45%|████▌     | 4530/10000 [00:00<00:00, 7534.85it/s] 53%|█████▎    | 5284/10000 [00:00<00:00, 7526.95it/s] 60%|██████    | 6037/10000 [00:00<00:00, 7504.50it/s] 68%|██████▊   | 6788/10000 [00:00<00:00, 7493.68it/s] 75%|███████▌  | 7538/10000 [00:01<00:00, 7493.48it/s] 83%|████████▎ | 8289/10000 [00:01<00:00, 7497.35it/s] 90%|█████████ | 9039/10000 [00:01<00:00, 7481.17it/s] 98%|█████████▊| 9788/10000 [00:01<00:00, 7465.61it/s]100%|██████████| 10000/10000 [00:01<00:00, 7501.70it/s]
2022-05-05 05:49:38 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 05:49:38 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [1:03:16<?, ?it/s]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 55, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 145, in run_synthesizer
    scoring_fn=scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 77, in prune_heuristics
    L_temp_train = self.apply_heuristics(heuristics[i], self.train_primitive_matrix, feat_combos[i], beta_opt_temp) 
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 50, in apply_heuristics
    L = np.zeros((np.shape(primitive_matrix)[0],len(heuristics)))
numpy.core._exceptions.MemoryError: Unable to allocate 261. GiB for an array with shape (57000, 613872) and data type float64
