/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 14:43:10 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 735/57000 [00:00<00:07, 7346.10it/s]  3%|▎         | 1478/57000 [00:00<00:07, 7392.14it/s]  4%|▍         | 2226/57000 [00:00<00:07, 7428.92it/s]  5%|▌         | 2974/57000 [00:00<00:07, 7447.01it/s]  7%|▋         | 3719/57000 [00:00<00:07, 7445.32it/s]  8%|▊         | 4468/57000 [00:00<00:07, 7456.75it/s]  9%|▉         | 5217/57000 [00:00<00:06, 7464.44it/s] 10%|█         | 5967/57000 [00:00<00:06, 7473.67it/s] 12%|█▏        | 6715/57000 [00:00<00:06, 7464.79it/s] 13%|█▎        | 7463/57000 [00:01<00:06, 7466.83it/s] 14%|█▍        | 8211/57000 [00:01<00:06, 7468.53it/s] 16%|█▌        | 8958/57000 [00:01<00:06, 7466.10it/s] 17%|█▋        | 9705/57000 [00:01<00:06, 7456.99it/s] 18%|█▊        | 10451/57000 [00:01<00:06, 7456.87it/s] 20%|█▉        | 11197/57000 [00:01<00:06, 7451.43it/s] 21%|██        | 11943/57000 [00:01<00:06, 7453.49it/s] 22%|██▏       | 12689/57000 [00:01<00:05, 7444.24it/s] 24%|██▎       | 13434/57000 [00:01<00:05, 7441.87it/s] 25%|██▍       | 14179/57000 [00:01<00:05, 7434.09it/s] 26%|██▌       | 14923/57000 [00:02<00:05, 7426.72it/s] 27%|██▋       | 15667/57000 [00:02<00:05, 7428.16it/s] 29%|██▉       | 16410/57000 [00:02<00:05, 7421.37it/s] 30%|███       | 17153/57000 [00:02<00:05, 7414.33it/s] 31%|███▏      | 17895/57000 [00:02<00:05, 7411.86it/s] 33%|███▎      | 18637/57000 [00:02<00:05, 7411.16it/s] 34%|███▍      | 19379/57000 [00:02<00:05, 7406.55it/s] 35%|███▌      | 20120/57000 [00:02<00:04, 7404.83it/s] 37%|███▋      | 20861/57000 [00:02<00:04, 7405.43it/s] 38%|███▊      | 21602/57000 [00:02<00:04, 7391.98it/s] 39%|███▉      | 22342/57000 [00:03<00:04, 7385.44it/s] 40%|████      | 23082/57000 [00:03<00:04, 7388.18it/s] 42%|████▏     | 23824/57000 [00:03<00:04, 7395.34it/s] 43%|████▎     | 24566/57000 [00:03<00:04, 7401.31it/s] 44%|████▍     | 25307/57000 [00:03<00:04, 7401.15it/s] 46%|████▌     | 26049/57000 [00:03<00:04, 7405.55it/s] 47%|████▋     | 26792/57000 [00:03<00:04, 7411.72it/s] 48%|████▊     | 27535/57000 [00:03<00:03, 7414.42it/s] 50%|████▉     | 28278/57000 [00:03<00:03, 7418.99it/s] 51%|█████     | 29022/57000 [00:03<00:03, 7422.28it/s] 52%|█████▏    | 29765/57000 [00:04<00:03, 7424.47it/s] 54%|█████▎    | 30508/57000 [00:04<00:03, 7424.49it/s] 55%|█████▍    | 31251/57000 [00:04<00:03, 7420.15it/s] 56%|█████▌    | 31995/57000 [00:04<00:03, 7423.88it/s] 57%|█████▋    | 32738/57000 [00:04<00:03, 7381.14it/s] 59%|█████▊    | 33477/57000 [00:04<00:03, 7284.26it/s] 60%|██████    | 34206/57000 [00:04<00:03, 7219.33it/s] 61%|██████▏   | 34929/57000 [00:04<00:03, 7187.16it/s] 63%|██████▎   | 35671/57000 [00:04<00:02, 7255.42it/s] 64%|██████▍   | 36416/57000 [00:04<00:02, 7311.80it/s] 65%|██████▌   | 37164/57000 [00:05<00:02, 7360.17it/s] 67%|██████▋   | 37912/57000 [00:05<00:02, 7394.48it/s] 68%|██████▊   | 38657/57000 [00:05<00:02, 7408.72it/s] 69%|██████▉   | 39403/57000 [00:05<00:02, 7423.07it/s] 70%|███████   | 40146/57000 [00:05<00:02, 7423.83it/s] 72%|███████▏  | 40891/57000 [00:05<00:02, 7429.56it/s] 73%|███████▎  | 41634/57000 [00:05<00:02, 7323.66it/s] 74%|███████▍  | 42382/57000 [00:05<00:01, 7367.79it/s] 76%|███████▌  | 43128/57000 [00:05<00:01, 7394.01it/s] 77%|███████▋  | 43874/57000 [00:05<00:01, 7413.14it/s] 78%|███████▊  | 44622/57000 [00:06<00:01, 7430.81it/s] 80%|███████▉  | 45368/57000 [00:06<00:01, 7437.06it/s] 81%|████████  | 46118/57000 [00:06<00:01, 7453.86it/s] 82%|████████▏ | 46865/57000 [00:06<00:01, 7457.93it/s] 84%|████████▎ | 47611/57000 [00:06<00:01, 7455.78it/s] 85%|████████▍ | 48359/57000 [00:06<00:01, 7460.92it/s] 86%|████████▌ | 49106/57000 [00:06<00:01, 7453.99it/s] 87%|████████▋ | 49852/57000 [00:06<00:00, 7448.26it/s] 89%|████████▉ | 50598/57000 [00:06<00:00, 7449.44it/s] 90%|█████████ | 51343/57000 [00:06<00:00, 7443.80it/s] 91%|█████████▏| 52088/57000 [00:07<00:00, 7443.93it/s] 93%|█████████▎| 52833/57000 [00:07<00:00, 7438.02it/s] 94%|█████████▍| 53577/57000 [00:07<00:00, 7436.16it/s] 95%|█████████▌| 54321/57000 [00:07<00:00, 7426.34it/s] 97%|█████████▋| 55066/57000 [00:07<00:00, 7430.75it/s] 98%|█████████▊| 55810/57000 [00:07<00:00, 7423.05it/s] 99%|█████████▉| 56553/57000 [00:07<00:00, 7390.13it/s]100%|██████████| 57000/57000 [00:07<00:00, 7411.58it/s]
2022-05-05 14:43:18 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 744/3000 [00:00<00:00, 7430.44it/s] 50%|████▉     | 1494/3000 [00:00<00:00, 7466.20it/s] 75%|███████▍  | 2242/3000 [00:00<00:00, 7469.38it/s]100%|█████████▉| 2989/3000 [00:00<00:00, 7467.97it/s]100%|██████████| 3000/3000 [00:00<00:00, 7463.71it/s]
2022-05-05 14:43:18 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 745/10000 [00:00<00:01, 7445.60it/s] 15%|█▍        | 1491/10000 [00:00<00:01, 7451.61it/s] 22%|██▏       | 2238/10000 [00:00<00:01, 7459.41it/s] 30%|██▉       | 2984/10000 [00:00<00:00, 7450.65it/s] 37%|███▋      | 3730/10000 [00:00<00:00, 7449.57it/s] 45%|████▍     | 4475/10000 [00:00<00:00, 7448.10it/s] 52%|█████▏    | 5220/10000 [00:00<00:00, 7446.82it/s] 60%|█████▉    | 5965/10000 [00:00<00:00, 7447.72it/s] 67%|██████▋   | 6710/10000 [00:00<00:00, 7445.12it/s] 75%|███████▍  | 7455/10000 [00:01<00:00, 7440.12it/s] 82%|████████▏ | 8200/10000 [00:01<00:00, 7434.98it/s] 89%|████████▉ | 8944/10000 [00:01<00:00, 7434.02it/s] 97%|█████████▋| 9689/10000 [00:01<00:00, 7436.96it/s]100%|██████████| 10000/10000 [00:01<00:00, 7441.80it/s]
2022-05-05 14:43:41 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 14:43:41 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [24:24<?, ?it/s]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 55, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 145, in run_synthesizer
    scoring_fn=scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 77, in prune_heuristics
    L_temp_train = self.apply_heuristics(heuristics[i], self.train_primitive_matrix, feat_combos[i], beta_opt_temp) 
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 50, in apply_heuristics
    L = np.zeros((np.shape(primitive_matrix)[0],len(heuristics)))
numpy.core._exceptions.MemoryError: Unable to allocate 111. GiB for an array with shape (57000, 261632) and data type float64
