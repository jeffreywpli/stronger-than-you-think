/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 12:25:47 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 736/57000 [00:00<00:07, 7355.34it/s]  3%|▎         | 1475/57000 [00:00<00:07, 7373.53it/s]  4%|▍         | 2218/57000 [00:00<00:07, 7394.92it/s]  5%|▌         | 2960/57000 [00:00<00:07, 7403.23it/s]  6%|▋         | 3704/57000 [00:00<00:07, 7415.11it/s]  8%|▊         | 4446/57000 [00:00<00:07, 7406.26it/s]  9%|▉         | 5187/57000 [00:00<00:07, 7387.39it/s] 10%|█         | 5926/57000 [00:00<00:06, 7379.89it/s] 12%|█▏        | 6665/57000 [00:00<00:06, 7380.89it/s] 13%|█▎        | 7405/57000 [00:01<00:06, 7386.66it/s] 14%|█▍        | 8147/57000 [00:01<00:06, 7396.78it/s] 16%|█▌        | 8890/57000 [00:01<00:06, 7406.01it/s] 17%|█▋        | 9634/57000 [00:01<00:06, 7414.69it/s] 18%|█▊        | 10377/57000 [00:01<00:06, 7417.38it/s] 20%|█▉        | 11121/57000 [00:01<00:06, 7421.29it/s] 21%|██        | 11869/57000 [00:01<00:06, 7437.08it/s] 22%|██▏       | 12617/57000 [00:01<00:05, 7449.21it/s] 23%|██▎       | 13365/57000 [00:01<00:05, 7458.08it/s] 25%|██▍       | 14111/57000 [00:01<00:05, 7403.68it/s] 26%|██▌       | 14852/57000 [00:02<00:05, 7399.35it/s] 27%|██▋       | 15597/57000 [00:02<00:05, 7412.57it/s] 29%|██▊       | 16341/57000 [00:02<00:05, 7418.04it/s] 30%|██▉       | 17083/57000 [00:02<00:05, 7416.96it/s] 31%|███▏      | 17825/57000 [00:02<00:05, 7409.12it/s] 33%|███▎      | 18569/57000 [00:02<00:05, 7416.78it/s] 34%|███▍      | 19311/57000 [00:02<00:05, 7411.84it/s] 35%|███▌      | 20054/57000 [00:02<00:04, 7415.53it/s] 36%|███▋      | 20799/57000 [00:02<00:04, 7424.55it/s] 38%|███▊      | 21542/57000 [00:02<00:04, 7422.44it/s] 39%|███▉      | 22285/57000 [00:03<00:04, 7316.47it/s] 40%|████      | 23025/57000 [00:03<00:04, 7339.93it/s] 42%|████▏     | 23763/57000 [00:03<00:04, 7350.54it/s] 43%|████▎     | 24500/57000 [00:03<00:04, 7355.15it/s] 44%|████▍     | 25239/57000 [00:03<00:04, 7365.03it/s] 46%|████▌     | 25981/57000 [00:03<00:04, 7379.17it/s] 47%|████▋     | 26723/57000 [00:03<00:04, 7388.40it/s] 48%|████▊     | 27462/57000 [00:03<00:04, 7374.70it/s] 49%|████▉     | 28200/57000 [00:03<00:03, 7375.52it/s] 51%|█████     | 28941/57000 [00:03<00:03, 7382.51it/s] 52%|█████▏    | 29680/57000 [00:04<00:03, 7375.72it/s] 53%|█████▎    | 30418/57000 [00:04<00:03, 7368.31it/s] 55%|█████▍    | 31156/57000 [00:04<00:03, 7369.89it/s] 56%|█████▌    | 31896/57000 [00:04<00:03, 7376.03it/s] 57%|█████▋    | 32638/57000 [00:04<00:03, 7388.95it/s] 59%|█████▊    | 33379/57000 [00:04<00:03, 7392.77it/s] 60%|█████▉    | 34119/57000 [00:04<00:03, 7331.85it/s] 61%|██████    | 34865/57000 [00:04<00:03, 7367.30it/s] 62%|██████▏   | 35610/57000 [00:04<00:02, 7391.86it/s] 64%|██████▍   | 36354/57000 [00:04<00:02, 7405.74it/s] 65%|██████▌   | 37102/57000 [00:05<00:02, 7425.06it/s] 66%|██████▋   | 37846/57000 [00:05<00:02, 7427.23it/s] 68%|██████▊   | 38589/57000 [00:05<00:02, 7424.39it/s] 69%|██████▉   | 39333/57000 [00:05<00:02, 7427.42it/s] 70%|███████   | 40077/57000 [00:05<00:02, 7428.81it/s] 72%|███████▏  | 40824/57000 [00:05<00:02, 7439.29it/s] 73%|███████▎  | 41572/57000 [00:05<00:02, 7450.92it/s] 74%|███████▍  | 42318/57000 [00:05<00:01, 7450.60it/s] 76%|███████▌  | 43065/57000 [00:05<00:01, 7455.47it/s] 77%|███████▋  | 43811/57000 [00:05<00:01, 7455.96it/s] 78%|███████▊  | 44558/57000 [00:06<00:01, 7457.98it/s] 79%|███████▉  | 45304/57000 [00:06<00:01, 7451.92it/s] 81%|████████  | 46052/57000 [00:06<00:01, 7458.52it/s] 82%|████████▏ | 46798/57000 [00:06<00:01, 7456.91it/s] 83%|████████▎ | 47545/57000 [00:06<00:01, 7457.96it/s] 85%|████████▍ | 48294/57000 [00:06<00:01, 7465.46it/s] 86%|████████▌ | 49043/57000 [00:06<00:01, 7469.99it/s] 87%|████████▋ | 49790/57000 [00:06<00:00, 7463.52it/s] 89%|████████▊ | 50538/57000 [00:06<00:00, 7467.09it/s] 90%|████████▉ | 51285/57000 [00:06<00:00, 7459.69it/s] 91%|█████████▏| 52033/57000 [00:07<00:00, 7465.20it/s] 93%|█████████▎| 52782/57000 [00:07<00:00, 7469.82it/s] 94%|█████████▍| 53529/57000 [00:07<00:00, 7463.03it/s] 95%|█████████▌| 54276/57000 [00:07<00:00, 7460.76it/s] 97%|█████████▋| 55023/57000 [00:07<00:00, 7456.57it/s] 98%|█████████▊| 55769/57000 [00:07<00:00, 7446.49it/s] 99%|█████████▉| 56514/57000 [00:07<00:00, 7437.69it/s]100%|██████████| 57000/57000 [00:07<00:00, 7415.28it/s]
2022-05-05 12:25:54 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 749/3000 [00:00<00:00, 7486.10it/s] 50%|████▉     | 1498/3000 [00:00<00:00, 7487.34it/s] 75%|███████▌  | 2250/3000 [00:00<00:00, 7498.74it/s]100%|██████████| 3000/3000 [00:00<00:00, 7501.90it/s]
2022-05-05 12:25:55 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  8%|▊         | 752/10000 [00:00<00:01, 7512.84it/s] 15%|█▌        | 1504/10000 [00:00<00:01, 7514.32it/s] 23%|██▎       | 2256/10000 [00:00<00:01, 7499.48it/s] 30%|███       | 3006/10000 [00:00<00:00, 7499.26it/s] 38%|███▊      | 3756/10000 [00:00<00:00, 7492.75it/s] 45%|████▌     | 4506/10000 [00:00<00:00, 7491.88it/s] 53%|█████▎    | 5256/10000 [00:00<00:00, 7491.51it/s] 60%|██████    | 6006/10000 [00:00<00:00, 7486.91it/s] 68%|██████▊   | 6755/10000 [00:00<00:00, 7484.79it/s] 75%|███████▌  | 7504/10000 [00:01<00:00, 7481.94it/s] 83%|████████▎ | 8253/10000 [00:01<00:00, 7481.93it/s] 90%|█████████ | 9002/10000 [00:01<00:00, 7472.26it/s] 98%|█████████▊| 9750/10000 [00:01<00:00, 7458.95it/s]100%|██████████| 10000/10000 [00:01<00:00, 7481.02it/s]
2022-05-05 12:26:18 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 12:26:18 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [21:09<?, ?it/s]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 55, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 145, in run_synthesizer
    scoring_fn=scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 77, in prune_heuristics
    L_temp_train = self.apply_heuristics(heuristics[i], self.train_primitive_matrix, feat_combos[i], beta_opt_temp) 
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 50, in apply_heuristics
    L = np.zeros((np.shape(primitive_matrix)[0],len(heuristics)))
numpy.core._exceptions.MemoryError: Unable to allocate 111. GiB for an array with shape (57000, 261632) and data type float64
