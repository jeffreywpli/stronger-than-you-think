/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 11:50:38 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 721/57000 [00:00<00:07, 7202.47it/s]  3%|▎         | 1451/57000 [00:00<00:07, 7255.85it/s]  4%|▍         | 2182/57000 [00:00<00:07, 7280.29it/s]  5%|▌         | 2914/57000 [00:00<00:07, 7294.82it/s]  6%|▋         | 3645/57000 [00:00<00:07, 7300.09it/s]  8%|▊         | 4376/57000 [00:00<00:07, 7300.07it/s]  9%|▉         | 5107/57000 [00:00<00:07, 7290.99it/s] 10%|█         | 5837/57000 [00:00<00:07, 7288.50it/s] 12%|█▏        | 6566/57000 [00:00<00:06, 7285.34it/s] 13%|█▎        | 7298/57000 [00:01<00:06, 7293.05it/s] 14%|█▍        | 8031/57000 [00:01<00:06, 7302.94it/s] 15%|█▌        | 8764/57000 [00:01<00:06, 7309.55it/s] 17%|█▋        | 9496/57000 [00:01<00:06, 7311.60it/s] 18%|█▊        | 10228/57000 [00:01<00:06, 7311.76it/s] 19%|█▉        | 10960/57000 [00:01<00:06, 7304.56it/s] 21%|██        | 11694/57000 [00:01<00:06, 7313.05it/s] 22%|██▏       | 12428/57000 [00:01<00:06, 7318.27it/s] 23%|██▎       | 13160/57000 [00:01<00:05, 7313.46it/s] 24%|██▍       | 13893/57000 [00:01<00:05, 7315.66it/s] 26%|██▌       | 14625/57000 [00:02<00:05, 7310.97it/s] 27%|██▋       | 15360/57000 [00:02<00:05, 7321.94it/s] 28%|██▊       | 16096/57000 [00:02<00:05, 7330.91it/s] 30%|██▉       | 16830/57000 [00:02<00:05, 7319.80it/s] 31%|███       | 17562/57000 [00:02<00:05, 7313.36it/s] 32%|███▏      | 18295/57000 [00:02<00:05, 7317.87it/s] 33%|███▎      | 19027/57000 [00:02<00:05, 7305.08it/s] 35%|███▍      | 19759/57000 [00:02<00:05, 7307.70it/s] 36%|███▌      | 20494/57000 [00:02<00:04, 7318.00it/s] 37%|███▋      | 21226/57000 [00:02<00:04, 7316.03it/s] 39%|███▊      | 21958/57000 [00:03<00:04, 7314.96it/s] 40%|███▉      | 22690/57000 [00:03<00:04, 7312.16it/s] 41%|████      | 23425/57000 [00:03<00:04, 7321.09it/s] 42%|████▏     | 24160/57000 [00:03<00:04, 7326.94it/s] 44%|████▎     | 24894/57000 [00:03<00:04, 7329.03it/s] 45%|████▍     | 25629/57000 [00:03<00:04, 7334.29it/s] 46%|████▋     | 26363/57000 [00:03<00:04, 7330.26it/s] 48%|████▊     | 27097/57000 [00:03<00:04, 7330.33it/s] 49%|████▉     | 27831/57000 [00:03<00:03, 7326.69it/s] 50%|█████     | 28564/57000 [00:03<00:03, 7321.74it/s] 51%|█████▏    | 29297/57000 [00:04<00:03, 7316.14it/s] 53%|█████▎    | 30030/57000 [00:04<00:03, 7318.66it/s] 54%|█████▍    | 30764/57000 [00:04<00:03, 7323.01it/s] 55%|█████▌    | 31497/57000 [00:04<00:03, 7321.77it/s] 57%|█████▋    | 32230/57000 [00:04<00:03, 7316.80it/s] 58%|█████▊    | 32963/57000 [00:04<00:03, 7319.13it/s] 59%|█████▉    | 33695/57000 [00:04<00:03, 7315.00it/s] 60%|██████    | 34427/57000 [00:04<00:03, 7308.03it/s] 62%|██████▏   | 35158/57000 [00:04<00:02, 7304.92it/s] 63%|██████▎   | 35889/57000 [00:04<00:02, 7294.79it/s] 64%|██████▍   | 36621/57000 [00:05<00:02, 7302.18it/s] 66%|██████▌   | 37354/57000 [00:05<00:02, 7307.96it/s] 67%|██████▋   | 38087/57000 [00:05<00:02, 7311.81it/s] 68%|██████▊   | 38821/57000 [00:05<00:02, 7317.97it/s] 69%|██████▉   | 39554/57000 [00:05<00:02, 7320.78it/s] 71%|███████   | 40287/57000 [00:05<00:02, 7308.45it/s] 72%|███████▏  | 41019/57000 [00:05<00:02, 7311.06it/s] 73%|███████▎  | 41751/57000 [00:05<00:02, 7312.81it/s] 75%|███████▍  | 42483/57000 [00:05<00:01, 7314.09it/s] 76%|███████▌  | 43215/57000 [00:05<00:01, 7315.67it/s] 77%|███████▋  | 43947/57000 [00:06<00:01, 7309.23it/s] 78%|███████▊  | 44678/57000 [00:06<00:01, 7304.73it/s] 80%|███████▉  | 45410/57000 [00:06<00:01, 7307.47it/s] 81%|████████  | 46148/57000 [00:06<00:01, 7326.40it/s] 82%|████████▏ | 46883/57000 [00:06<00:01, 7333.34it/s] 84%|████████▎ | 47617/57000 [00:06<00:01, 7332.18it/s] 85%|████████▍ | 48351/57000 [00:06<00:01, 7321.47it/s] 86%|████████▌ | 49084/57000 [00:06<00:01, 7313.11it/s] 87%|████████▋ | 49816/57000 [00:06<00:00, 7310.84it/s] 89%|████████▊ | 50548/57000 [00:06<00:00, 7310.69it/s] 90%|████████▉ | 51280/57000 [00:07<00:00, 7307.00it/s] 91%|█████████ | 52012/57000 [00:07<00:00, 7310.49it/s] 93%|█████████▎| 52745/57000 [00:07<00:00, 7313.83it/s] 94%|█████████▍| 53477/57000 [00:07<00:00, 7309.91it/s] 95%|█████████▌| 54208/57000 [00:07<00:00, 7296.96it/s] 96%|█████████▋| 54938/57000 [00:07<00:00, 7289.94it/s] 98%|█████████▊| 55667/57000 [00:07<00:00, 7286.94it/s] 99%|█████████▉| 56396/57000 [00:07<00:00, 7283.22it/s]100%|██████████| 57000/57000 [00:07<00:00, 7309.90it/s]
2022-05-05 11:50:46 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 24%|██▍       | 732/3000 [00:00<00:00, 7312.93it/s] 49%|████▉     | 1472/3000 [00:00<00:00, 7362.52it/s] 74%|███████▍  | 2213/3000 [00:00<00:00, 7383.99it/s] 98%|█████████▊| 2952/3000 [00:00<00:00, 7382.31it/s]100%|██████████| 3000/3000 [00:00<00:00, 7372.98it/s]
2022-05-05 11:50:46 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 734/10000 [00:00<00:01, 7337.14it/s] 15%|█▍        | 1470/10000 [00:00<00:01, 7346.56it/s] 22%|██▏       | 2205/10000 [00:00<00:01, 7345.56it/s] 29%|██▉       | 2940/10000 [00:00<00:00, 7344.34it/s] 37%|███▋      | 3675/10000 [00:00<00:00, 7345.84it/s] 44%|████▍     | 4411/10000 [00:00<00:00, 7348.26it/s] 51%|█████▏    | 5146/10000 [00:00<00:00, 7336.42it/s] 59%|█████▉    | 5880/10000 [00:00<00:00, 7334.58it/s] 66%|██████▌   | 6615/10000 [00:00<00:00, 7336.78it/s] 73%|███████▎  | 7349/10000 [00:01<00:00, 7331.28it/s] 81%|████████  | 8083/10000 [00:01<00:00, 7332.19it/s] 88%|████████▊ | 8819/10000 [00:01<00:00, 7339.65it/s] 96%|█████████▌| 9554/10000 [00:01<00:00, 7341.72it/s]100%|██████████| 10000/10000 [00:01<00:00, 7338.97it/s]
2022-05-05 11:51:09 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 11:51:09 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:08<?, ?it/s]
Fitting MulticlassAdaptor... Class 1
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:08<?, ?it/s]
Fitting MulticlassAdaptor... Class 2
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:08<?, ?it/s]
Fitting MulticlassAdaptor... Class 3
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:08<02:58,  8.13s/it]  9%|▊         | 2/23 [00:16<02:56,  8.42s/it] 13%|█▎        | 3/23 [00:25<02:51,  8.60s/it] 17%|█▋        | 4/23 [00:34<02:45,  8.73s/it] 22%|██▏       | 5/23 [00:43<02:39,  8.87s/it] 26%|██▌       | 6/23 [00:52<02:32,  8.95s/it] 30%|███       | 7/23 [01:01<02:24,  9.02s/it] 35%|███▍      | 8/23 [01:11<02:16,  9.07s/it] 35%|███▍      | 8/23 [01:11<02:13,  8.89s/it]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 59, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 143, in run_synthesizer
    hf, feat_combos = self.syn.generate_heuristics(model, max_cardinality)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 87, in generate_heuristics
    heuristics.append(self.fit_function(comb, classifier))
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 68, in fit_function
    clf.fit(X, self.val_ground)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1376, in fit
    " class: %r" % classes_[0])
ValueError: This solver needs samples of at least 2 classes in the data, but the data contains only one class: 1
