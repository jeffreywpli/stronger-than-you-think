/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 08:06:47 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 744/57000 [00:00<00:07, 7439.10it/s]  3%|▎         | 1495/57000 [00:00<00:07, 7477.21it/s]  4%|▍         | 2245/57000 [00:00<00:07, 7485.91it/s]  5%|▌         | 2994/57000 [00:00<00:07, 7486.83it/s]  7%|▋         | 3743/57000 [00:00<00:07, 7479.27it/s]  8%|▊         | 4491/57000 [00:00<00:07, 7478.74it/s]  9%|▉         | 5239/57000 [00:00<00:06, 7476.90it/s] 11%|█         | 5992/57000 [00:00<00:06, 7492.21it/s] 12%|█▏        | 6745/57000 [00:00<00:06, 7502.56it/s] 13%|█▎        | 7499/57000 [00:01<00:06, 7512.32it/s] 14%|█▍        | 8251/57000 [00:01<00:06, 7508.00it/s] 16%|█▌        | 9006/57000 [00:01<00:06, 7517.88it/s] 17%|█▋        | 9760/57000 [00:01<00:06, 7523.73it/s] 18%|█▊        | 10518/57000 [00:01<00:06, 7540.43it/s] 20%|█▉        | 11275/57000 [00:01<00:06, 7548.86it/s] 21%|██        | 12032/57000 [00:01<00:05, 7553.62it/s] 22%|██▏       | 12788/57000 [00:01<00:05, 7551.27it/s] 24%|██▍       | 13545/57000 [00:01<00:05, 7556.77it/s] 25%|██▌       | 14301/57000 [00:01<00:05, 7547.78it/s] 26%|██▋       | 15057/57000 [00:02<00:05, 7548.62it/s] 28%|██▊       | 15812/57000 [00:02<00:05, 7546.51it/s] 29%|██▉       | 16567/57000 [00:02<00:05, 7535.96it/s] 30%|███       | 17321/57000 [00:02<00:05, 7535.79it/s] 32%|███▏      | 18075/57000 [00:02<00:05, 7534.61it/s] 33%|███▎      | 18829/57000 [00:02<00:05, 7517.50it/s] 34%|███▍      | 19583/57000 [00:02<00:04, 7523.23it/s] 36%|███▌      | 20336/57000 [00:02<00:04, 7524.55it/s] 37%|███▋      | 21089/57000 [00:02<00:04, 7523.39it/s] 38%|███▊      | 21842/57000 [00:02<00:04, 7524.27it/s] 40%|███▉      | 22595/57000 [00:03<00:04, 7508.46it/s] 41%|████      | 23350/57000 [00:03<00:04, 7519.17it/s] 42%|████▏     | 24105/57000 [00:03<00:04, 7527.83it/s] 44%|████▎     | 24859/57000 [00:03<00:04, 7530.91it/s] 45%|████▍     | 25615/57000 [00:03<00:04, 7537.89it/s] 46%|████▋     | 26369/57000 [00:03<00:04, 7530.25it/s] 48%|████▊     | 27123/57000 [00:03<00:03, 7530.33it/s] 49%|████▉     | 27879/57000 [00:03<00:03, 7538.84it/s] 50%|█████     | 28635/57000 [00:03<00:03, 7542.41it/s] 52%|█████▏    | 29390/57000 [00:03<00:03, 7542.22it/s] 53%|█████▎    | 30145/57000 [00:04<00:03, 7543.00it/s] 54%|█████▍    | 30901/57000 [00:04<00:03, 7545.37it/s] 56%|█████▌    | 31656/57000 [00:04<00:03, 7545.21it/s] 57%|█████▋    | 32411/57000 [00:04<00:03, 7538.83it/s] 58%|█████▊    | 33165/57000 [00:04<00:03, 7536.55it/s] 60%|█████▉    | 33919/57000 [00:04<00:03, 7536.58it/s] 61%|██████    | 34673/57000 [00:04<00:02, 7516.64it/s] 62%|██████▏   | 35429/57000 [00:04<00:02, 7529.15it/s] 63%|██████▎   | 36183/57000 [00:04<00:02, 7530.44it/s] 65%|██████▍   | 36939/57000 [00:04<00:02, 7537.47it/s] 66%|██████▌   | 37697/57000 [00:05<00:02, 7549.17it/s] 67%|██████▋   | 38452/57000 [00:05<00:02, 7549.37it/s] 69%|██████▉   | 39210/57000 [00:05<00:02, 7557.53it/s] 70%|███████   | 39966/57000 [00:05<00:02, 7555.59it/s] 71%|███████▏  | 40724/57000 [00:05<00:02, 7560.07it/s] 73%|███████▎  | 41483/57000 [00:05<00:02, 7567.48it/s] 74%|███████▍  | 42240/57000 [00:05<00:01, 7562.03it/s] 75%|███████▌  | 42998/57000 [00:05<00:01, 7565.51it/s] 77%|███████▋  | 43755/57000 [00:05<00:01, 7565.81it/s] 78%|███████▊  | 44512/57000 [00:05<00:01, 7566.13it/s] 79%|███████▉  | 45269/57000 [00:06<00:01, 7559.87it/s] 81%|████████  | 46025/57000 [00:06<00:01, 7542.58it/s] 82%|████████▏ | 46780/57000 [00:06<00:01, 7534.32it/s] 83%|████████▎ | 47535/57000 [00:06<00:01, 7538.27it/s] 85%|████████▍ | 48290/57000 [00:06<00:01, 7540.80it/s] 86%|████████▌ | 49045/57000 [00:06<00:01, 7539.55it/s] 87%|████████▋ | 49800/57000 [00:06<00:00, 7540.83it/s] 89%|████████▊ | 50558/57000 [00:06<00:00, 7550.05it/s] 90%|█████████ | 51316/57000 [00:06<00:00, 7558.48it/s] 91%|█████████▏| 52072/57000 [00:06<00:00, 7557.45it/s] 93%|█████████▎| 52828/57000 [00:07<00:00, 7505.01it/s] 94%|█████████▍| 53585/57000 [00:07<00:00, 7522.53it/s] 95%|█████████▌| 54341/57000 [00:07<00:00, 7532.92it/s] 97%|█████████▋| 55099/57000 [00:07<00:00, 7545.74it/s] 98%|█████████▊| 55854/57000 [00:07<00:00, 7474.79it/s] 99%|█████████▉| 56615/57000 [00:07<00:00, 7514.98it/s]100%|██████████| 57000/57000 [00:07<00:00, 7531.79it/s]
2022-05-05 08:06:54 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▌       | 752/3000 [00:00<00:00, 7517.64it/s] 50%|█████     | 1509/3000 [00:00<00:00, 7544.37it/s] 76%|███████▌  | 2265/3000 [00:00<00:00, 7550.37it/s]100%|██████████| 3000/3000 [00:00<00:00, 7552.06it/s]
2022-05-05 08:06:55 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  8%|▊         | 750/10000 [00:00<00:01, 7495.91it/s] 15%|█▌        | 1502/10000 [00:00<00:01, 7504.66it/s] 23%|██▎       | 2256/10000 [00:00<00:01, 7520.16it/s] 30%|███       | 3009/10000 [00:00<00:00, 7522.83it/s] 38%|███▊      | 3762/10000 [00:00<00:00, 7524.98it/s] 45%|████▌     | 4516/10000 [00:00<00:00, 7529.18it/s] 53%|█████▎    | 5270/10000 [00:00<00:00, 7529.71it/s] 60%|██████    | 6024/10000 [00:00<00:00, 7531.86it/s] 68%|██████▊   | 6778/10000 [00:00<00:00, 7529.34it/s] 75%|███████▌  | 7533/10000 [00:01<00:00, 7533.16it/s] 83%|████████▎ | 8287/10000 [00:01<00:00, 7534.30it/s] 90%|█████████ | 9041/10000 [00:01<00:00, 7527.87it/s] 98%|█████████▊| 9794/10000 [00:01<00:00, 7525.77it/s]100%|██████████| 10000/10000 [00:01<00:00, 7526.53it/s]
2022-05-05 08:06:59 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 08:06:59 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [55:20<?, ?it/s]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 55, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 145, in run_synthesizer
    scoring_fn=scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 77, in prune_heuristics
    L_temp_train = self.apply_heuristics(heuristics[i], self.train_primitive_matrix, feat_combos[i], beta_opt_temp) 
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 50, in apply_heuristics
    L = np.zeros((np.shape(primitive_matrix)[0],len(heuristics)))
numpy.core._exceptions.MemoryError: Unable to allocate 261. GiB for an array with shape (57000, 613872) and data type float64
