/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 03:43:15 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 760/57000 [00:00<00:07, 7590.83it/s]  3%|▎         | 1532/57000 [00:00<00:07, 7663.88it/s]  4%|▍         | 2303/57000 [00:00<00:07, 7682.89it/s]  5%|▌         | 3073/57000 [00:00<00:07, 7689.05it/s]  7%|▋         | 3842/57000 [00:00<00:06, 7681.56it/s]  8%|▊         | 4614/57000 [00:00<00:06, 7692.42it/s]  9%|▉         | 5387/57000 [00:00<00:06, 7701.59it/s] 11%|█         | 6161/57000 [00:00<00:06, 7713.49it/s] 12%|█▏        | 6934/57000 [00:00<00:06, 7717.43it/s] 14%|█▎        | 7706/57000 [00:01<00:06, 7713.96it/s] 15%|█▍        | 8478/57000 [00:01<00:06, 7666.77it/s] 16%|█▌        | 9246/57000 [00:01<00:06, 7670.10it/s] 18%|█▊        | 10019/57000 [00:01<00:06, 7685.51it/s] 19%|█▉        | 10796/57000 [00:01<00:05, 7708.32it/s] 20%|██        | 11572/57000 [00:01<00:05, 7722.63it/s] 22%|██▏       | 12345/57000 [00:01<00:05, 7723.02it/s] 23%|██▎       | 13118/57000 [00:01<00:05, 7709.32it/s] 24%|██▍       | 13892/57000 [00:01<00:05, 7715.94it/s] 26%|██▌       | 14666/57000 [00:01<00:05, 7720.25it/s] 27%|██▋       | 15440/57000 [00:02<00:05, 7725.51it/s] 28%|██▊       | 16213/57000 [00:02<00:05, 7723.30it/s] 30%|██▉       | 16986/57000 [00:02<00:05, 7713.86it/s] 31%|███       | 17760/57000 [00:02<00:05, 7721.56it/s] 33%|███▎      | 18533/57000 [00:02<00:04, 7722.12it/s] 34%|███▍      | 19306/57000 [00:02<00:04, 7707.01it/s] 35%|███▌      | 20079/57000 [00:02<00:04, 7711.01it/s] 37%|███▋      | 20851/57000 [00:02<00:04, 7695.13it/s] 38%|███▊      | 21621/57000 [00:02<00:04, 7683.78it/s] 39%|███▉      | 22390/57000 [00:02<00:04, 7672.11it/s] 41%|████      | 23161/57000 [00:03<00:04, 7680.62it/s] 42%|████▏     | 23930/57000 [00:03<00:04, 7673.65it/s] 43%|████▎     | 24698/57000 [00:03<00:04, 7647.23it/s] 45%|████▍     | 25463/57000 [00:03<00:04, 7542.38it/s] 46%|████▌     | 26218/57000 [00:03<00:04, 7535.63it/s] 47%|████▋     | 26981/57000 [00:03<00:03, 7563.51it/s] 49%|████▊     | 27746/57000 [00:03<00:03, 7588.40it/s] 50%|█████     | 28513/57000 [00:03<00:03, 7611.38it/s] 51%|█████▏    | 29280/57000 [00:03<00:03, 7627.72it/s] 53%|█████▎    | 30051/57000 [00:03<00:03, 7649.52it/s] 54%|█████▍    | 30821/57000 [00:04<00:03, 7663.43it/s] 55%|█████▌    | 31588/57000 [00:04<00:03, 7520.85it/s] 57%|█████▋    | 32341/57000 [00:04<00:03, 7484.71it/s] 58%|█████▊    | 33109/57000 [00:04<00:03, 7539.71it/s] 59%|█████▉    | 33876/57000 [00:04<00:03, 7575.92it/s] 61%|██████    | 34640/57000 [00:04<00:02, 7594.33it/s] 62%|██████▏   | 35406/57000 [00:04<00:02, 7613.68it/s] 63%|██████▎   | 36172/57000 [00:04<00:02, 7627.00it/s] 65%|██████▍   | 36935/57000 [00:04<00:02, 7580.54it/s] 66%|██████▌   | 37694/57000 [00:04<00:02, 7503.53it/s] 67%|██████▋   | 38445/57000 [00:05<00:02, 7452.11it/s] 69%|██████▉   | 39191/57000 [00:05<00:02, 7413.27it/s] 70%|███████   | 39933/57000 [00:05<00:02, 7369.03it/s] 71%|███████▏  | 40671/57000 [00:05<00:02, 7355.96it/s] 73%|███████▎  | 41438/57000 [00:05<00:02, 7448.53it/s] 74%|███████▍  | 42183/57000 [00:05<00:01, 7443.34it/s] 75%|███████▌  | 42928/57000 [00:05<00:01, 7393.83it/s] 77%|███████▋  | 43668/57000 [00:05<00:01, 7345.85it/s] 78%|███████▊  | 44410/57000 [00:05<00:01, 7367.79it/s] 79%|███████▉  | 45174/57000 [00:05<00:01, 7446.87it/s] 81%|████████  | 45943/57000 [00:06<00:01, 7516.59it/s] 82%|████████▏ | 46709/57000 [00:06<00:01, 7556.90it/s] 83%|████████▎ | 47472/57000 [00:06<00:01, 7578.22it/s] 85%|████████▍ | 48230/57000 [00:06<00:01, 7499.48it/s] 86%|████████▌ | 48994/57000 [00:06<00:01, 7539.92it/s] 87%|████████▋ | 49761/57000 [00:06<00:00, 7575.75it/s] 89%|████████▊ | 50527/57000 [00:06<00:00, 7599.61it/s] 90%|████████▉ | 51288/57000 [00:06<00:00, 7600.29it/s] 91%|█████████▏| 52056/57000 [00:06<00:00, 7621.27it/s] 93%|█████████▎| 52821/57000 [00:06<00:00, 7629.30it/s] 94%|█████████▍| 53585/57000 [00:07<00:00, 7630.64it/s] 95%|█████████▌| 54350/57000 [00:07<00:00, 7633.89it/s] 97%|█████████▋| 55116/57000 [00:07<00:00, 7639.41it/s] 98%|█████████▊| 55880/57000 [00:07<00:00, 7628.44it/s] 99%|█████████▉| 56643/57000 [00:07<00:00, 7621.46it/s]100%|██████████| 57000/57000 [00:07<00:00, 7606.17it/s]
2022-05-05 03:43:22 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 745/3000 [00:00<00:00, 7446.83it/s] 50%|█████     | 1511/3000 [00:00<00:00, 7566.70it/s] 76%|███████▌  | 2278/3000 [00:00<00:00, 7611.52it/s]100%|██████████| 3000/3000 [00:00<00:00, 7610.74it/s]
2022-05-05 03:43:23 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  8%|▊         | 761/10000 [00:00<00:01, 7608.68it/s] 15%|█▌        | 1526/10000 [00:00<00:01, 7632.55it/s] 23%|██▎       | 2291/10000 [00:00<00:01, 7640.24it/s] 31%|███       | 3057/10000 [00:00<00:00, 7644.65it/s] 38%|███▊      | 3823/10000 [00:00<00:00, 7650.14it/s] 46%|████▌     | 4589/10000 [00:00<00:00, 7650.65it/s] 54%|█████▎    | 5355/10000 [00:00<00:00, 7577.41it/s] 61%|██████    | 6113/10000 [00:00<00:00, 7472.37it/s] 69%|██████▊   | 6861/10000 [00:00<00:00, 7468.80it/s] 76%|███████▋  | 7627/10000 [00:01<00:00, 7525.98it/s] 84%|████████▍ | 8394/10000 [00:01<00:00, 7569.25it/s] 92%|█████████▏| 9158/10000 [00:01<00:00, 7589.49it/s] 99%|█████████▉| 9928/10000 [00:01<00:00, 7620.63it/s]100%|██████████| 10000/10000 [00:01<00:00, 7588.11it/s]
2022-05-05 03:43:27 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 03:43:27 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:12<?, ?it/s]
Fitting MulticlassAdaptor... Class 1
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:12<?, ?it/s]
Fitting MulticlassAdaptor... Class 2
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:12<?, ?it/s]
Fitting MulticlassAdaptor... Class 3
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:12<?, ?it/s]
Fitting MulticlassAdaptor... Class 4
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:12<?, ?it/s]
Fitting MulticlassAdaptor... Class 5
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:12<?, ?it/s]
Fitting MulticlassAdaptor... Class 6
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:12<04:27, 12.15s/it]  4%|▍         | 1/23 [00:12<04:29, 12.24s/it]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 59, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 143, in run_synthesizer
    hf, feat_combos = self.syn.generate_heuristics(model, max_cardinality)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 87, in generate_heuristics
    heuristics.append(self.fit_function(comb, classifier))
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 68, in fit_function
    clf.fit(X, self.val_ground)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1376, in fit
    " class: %r" % classes_[0])
ValueError: This solver needs samples of at least 2 classes in the data, but the data contains only one class: -1
