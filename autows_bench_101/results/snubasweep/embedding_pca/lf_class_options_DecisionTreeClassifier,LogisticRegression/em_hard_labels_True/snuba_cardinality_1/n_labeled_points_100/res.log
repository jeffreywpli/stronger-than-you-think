/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 10:09:29 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 734/57000 [00:00<00:07, 7331.46it/s]  3%|▎         | 1480/57000 [00:00<00:07, 7403.10it/s]  4%|▍         | 2225/57000 [00:00<00:07, 7421.40it/s]  5%|▌         | 2969/57000 [00:00<00:07, 7427.22it/s]  7%|▋         | 3713/57000 [00:00<00:07, 7428.63it/s]  8%|▊         | 4463/57000 [00:00<00:07, 7450.08it/s]  9%|▉         | 5212/57000 [00:00<00:06, 7461.34it/s] 10%|█         | 5964/57000 [00:00<00:06, 7477.57it/s] 12%|█▏        | 6715/57000 [00:00<00:06, 7486.72it/s] 13%|█▎        | 7467/57000 [00:01<00:06, 7496.87it/s] 14%|█▍        | 8217/57000 [00:01<00:06, 7483.35it/s] 16%|█▌        | 8967/57000 [00:01<00:06, 7486.39it/s] 17%|█▋        | 9717/57000 [00:01<00:06, 7488.15it/s] 18%|█▊        | 10466/57000 [00:01<00:06, 7387.48it/s] 20%|█▉        | 11224/57000 [00:01<00:06, 7444.28it/s] 21%|██        | 11985/57000 [00:01<00:06, 7492.20it/s] 22%|██▏       | 12747/57000 [00:01<00:05, 7529.70it/s] 24%|██▎       | 13508/57000 [00:01<00:05, 7553.06it/s] 25%|██▌       | 14267/57000 [00:01<00:05, 7562.70it/s] 26%|██▋       | 15026/57000 [00:02<00:05, 7568.63it/s] 28%|██▊       | 15785/57000 [00:02<00:05, 7572.75it/s] 29%|██▉       | 16544/57000 [00:02<00:05, 7576.45it/s] 30%|███       | 17302/57000 [00:02<00:05, 7573.97it/s] 32%|███▏      | 18062/57000 [00:02<00:05, 7580.55it/s] 33%|███▎      | 18821/57000 [00:02<00:05, 7575.27it/s] 34%|███▍      | 19581/57000 [00:02<00:04, 7581.07it/s] 36%|███▌      | 20341/57000 [00:02<00:04, 7583.87it/s] 37%|███▋      | 21100/57000 [00:02<00:04, 7583.86it/s] 38%|███▊      | 21859/57000 [00:02<00:04, 7578.95it/s] 40%|███▉      | 22617/57000 [00:03<00:04, 7571.69it/s] 41%|████      | 23375/57000 [00:03<00:04, 7506.10it/s] 42%|████▏     | 24126/57000 [00:03<00:04, 7501.10it/s] 44%|████▎     | 24877/57000 [00:03<00:04, 7502.51it/s] 45%|████▍     | 25628/57000 [00:03<00:04, 7401.80it/s] 46%|████▋     | 26378/57000 [00:03<00:04, 7429.91it/s] 48%|████▊     | 27132/57000 [00:03<00:04, 7460.94it/s] 49%|████▉     | 27883/57000 [00:03<00:03, 7474.06it/s] 50%|█████     | 28632/57000 [00:03<00:03, 7476.74it/s] 52%|█████▏    | 29385/57000 [00:03<00:03, 7492.00it/s] 53%|█████▎    | 30135/57000 [00:04<00:03, 7406.78it/s] 54%|█████▍    | 30885/57000 [00:04<00:03, 7432.92it/s] 55%|█████▌    | 31629/57000 [00:04<00:03, 7401.38it/s] 57%|█████▋    | 32383/57000 [00:04<00:03, 7442.12it/s] 58%|█████▊    | 33142/57000 [00:04<00:03, 7484.22it/s] 59%|█████▉    | 33895/57000 [00:04<00:03, 7497.01it/s] 61%|██████    | 34647/57000 [00:04<00:02, 7503.78it/s] 62%|██████▏   | 35404/57000 [00:04<00:02, 7522.16it/s] 63%|██████▎   | 36160/57000 [00:04<00:02, 7531.59it/s] 65%|██████▍   | 36914/57000 [00:04<00:02, 7529.16it/s] 66%|██████▌   | 37669/57000 [00:05<00:02, 7535.26it/s] 67%|██████▋   | 38423/57000 [00:05<00:02, 7536.07it/s] 69%|██████▊   | 39178/57000 [00:05<00:02, 7537.52it/s] 70%|███████   | 39934/57000 [00:05<00:02, 7542.48it/s] 71%|███████▏  | 40689/57000 [00:05<00:02, 7543.11it/s] 73%|███████▎  | 41444/57000 [00:05<00:02, 7467.81it/s] 74%|███████▍  | 42191/57000 [00:05<00:01, 7462.37it/s] 75%|███████▌  | 42938/57000 [00:05<00:01, 7462.12it/s] 77%|███████▋  | 43686/57000 [00:05<00:01, 7466.00it/s] 78%|███████▊  | 44438/57000 [00:05<00:01, 7479.65it/s] 79%|███████▉  | 45188/57000 [00:06<00:01, 7484.11it/s] 81%|████████  | 45940/57000 [00:06<00:01, 7492.84it/s] 82%|████████▏ | 46692/57000 [00:06<00:01, 7499.94it/s] 83%|████████▎ | 47443/57000 [00:06<00:01, 7493.93it/s] 85%|████████▍ | 48193/57000 [00:06<00:01, 7484.64it/s] 86%|████████▌ | 48942/57000 [00:06<00:01, 7480.83it/s] 87%|████████▋ | 49692/57000 [00:06<00:00, 7485.26it/s] 88%|████████▊ | 50441/57000 [00:06<00:00, 7484.02it/s] 90%|████████▉ | 51190/57000 [00:06<00:00, 7469.66it/s] 91%|█████████ | 51938/57000 [00:06<00:00, 7470.31it/s] 92%|█████████▏| 52687/57000 [00:07<00:00, 7474.09it/s] 94%|█████████▎| 53435/57000 [00:07<00:00, 7458.40it/s] 95%|█████████▌| 54183/57000 [00:07<00:00, 7462.96it/s] 96%|█████████▋| 54930/57000 [00:07<00:00, 7429.79it/s] 98%|█████████▊| 55674/57000 [00:07<00:00, 7388.53it/s] 99%|█████████▉| 56413/57000 [00:07<00:00, 7330.84it/s]100%|██████████| 57000/57000 [00:07<00:00, 7484.34it/s]
2022-05-05 10:09:37 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▌       | 752/3000 [00:00<00:00, 7513.42it/s] 50%|█████     | 1507/3000 [00:00<00:00, 7530.60it/s] 75%|███████▌  | 2263/3000 [00:00<00:00, 7541.77it/s]100%|██████████| 3000/3000 [00:00<00:00, 7541.37it/s]
2022-05-05 10:09:37 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  8%|▊         | 752/10000 [00:00<00:01, 7517.66it/s] 15%|█▌        | 1507/10000 [00:00<00:01, 7534.96it/s] 23%|██▎       | 2261/10000 [00:00<00:01, 7529.83it/s] 30%|███       | 3015/10000 [00:00<00:00, 7533.06it/s] 38%|███▊      | 3769/10000 [00:00<00:00, 7529.15it/s] 45%|████▌     | 4522/10000 [00:00<00:00, 7520.53it/s] 53%|█████▎    | 5275/10000 [00:00<00:00, 7518.46it/s] 60%|██████    | 6027/10000 [00:00<00:00, 7513.69it/s] 68%|██████▊   | 6779/10000 [00:00<00:00, 7505.68it/s] 75%|███████▌  | 7530/10000 [00:01<00:00, 7498.67it/s] 83%|████████▎ | 8280/10000 [00:01<00:00, 7486.43it/s] 90%|█████████ | 9029/10000 [00:01<00:00, 7477.15it/s] 98%|█████████▊| 9778/10000 [00:01<00:00, 7480.22it/s]100%|██████████| 10000/10000 [00:01<00:00, 7502.80it/s]
(67100, 784)
2022-05-05 10:09:42 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 10:09:42 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:02<00:49,  2.25s/it]  9%|▊         | 2/23 [00:04<00:48,  2.33s/it] 13%|█▎        | 3/23 [00:07<00:47,  2.39s/it] 17%|█▋        | 4/23 [00:09<00:46,  2.43s/it] 22%|██▏       | 5/23 [00:12<00:44,  2.49s/it] 26%|██▌       | 6/23 [00:14<00:43,  2.55s/it] 30%|███       | 7/23 [00:17<00:42,  2.63s/it] 30%|███       | 7/23 [00:17<00:40,  2.52s/it]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 59, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 143, in run_synthesizer
    hf, feat_combos = self.syn.generate_heuristics(model, max_cardinality)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 87, in generate_heuristics
    heuristics.append(self.fit_function(comb, classifier))
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 68, in fit_function
    clf.fit(X, self.val_ground)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1376, in fit
    " class: %r" % classes_[0])
ValueError: This solver needs samples of at least 2 classes in the data, but the data contains only one class: 1
