/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:62: UserWarning: train_data has been renamed data
  warnings.warn("train_data has been renamed data")
/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:52: UserWarning: train_labels has been renamed targets
  warnings.warn("train_labels has been renamed targets")
/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:67: UserWarning: test_data has been renamed data
  warnings.warn("test_data has been renamed data")
/hdd2/kaylee/anaconda3/envs/AutoWS-Bench-101/lib/python3.7/site-packages/torchvision/datasets/mnist.py:57: UserWarning: test_labels has been renamed targets
  warnings.warn("test_labels has been renamed targets")
getting mnist data
projecting train data set
500/600001000/600001500/600002000/600002500/600003000/600003500/600004000/600004500/600005000/600005500/600006000/600006500/600007000/600007500/600008000/600008500/600009000/600009500/6000010000/6000010500/6000011000/6000011500/6000012000/6000012500/6000013000/6000013500/6000014000/6000014500/6000015000/6000015500/6000016000/6000016500/6000017000/6000017500/6000018000/6000018500/6000019000/6000019500/6000020000/6000020500/6000021000/6000021500/6000022000/6000022500/6000023000/6000023500/6000024000/6000024500/6000025000/6000025500/6000026000/6000026500/6000027000/6000027500/6000028000/6000028500/6000029000/6000029500/6000030000/6000030500/6000031000/6000031500/6000032000/6000032500/6000033000/6000033500/6000034000/6000034500/6000035000/6000035500/6000036000/6000036500/6000037000/6000037500/6000038000/6000038500/6000039000/6000039500/6000040000/6000040500/6000041000/6000041500/6000042000/6000042500/6000043000/6000043500/6000044000/6000044500/6000045000/6000045500/6000046000/6000046500/6000047000/6000047500/6000048000/6000048500/6000049000/6000049500/6000050000/6000050500/6000051000/6000051500/6000052000/6000052500/6000053000/6000053500/6000054000/6000054500/6000055000/6000055500/6000056000/6000056500/6000057000/6000057500/6000058000/6000058500/6000059000/6000059500/6000060000/60000
projecting test data set
500/100001000/100001500/100002000/100002500/100003000/100003500/100004000/100004500/100005000/100005500/100006000/100006500/100007000/100007500/100008000/100008500/100009000/100009500/1000010000/10000
writing pickle
done
getting mnist data
projecting train data set
500/600001000/600001500/600002000/600002500/600003000/600003500/600004000/600004500/600005000/600005500/600006000/600006500/600007000/600007500/600008000/600008500/600009000/600009500/6000010000/6000010500/6000011000/6000011500/6000012000/6000012500/6000013000/6000013500/6000014000/6000014500/6000015000/6000015500/6000016000/6000016500/6000017000/6000017500/6000018000/6000018500/6000019000/6000019500/6000020000/6000020500/6000021000/6000021500/6000022000/6000022500/6000023000/6000023500/6000024000/6000024500/6000025000/6000025500/6000026000/6000026500/6000027000/6000027500/6000028000/6000028500/6000029000/6000029500/6000030000/6000030500/6000031000/6000031500/6000032000/6000032500/6000033000/6000033500/6000034000/6000034500/6000035000/6000035500/6000036000/6000036500/6000037000/6000037500/6000038000/6000038500/6000039000/6000039500/6000040000/6000040500/6000041000/6000041500/6000042000/6000042500/6000043000/6000043500/6000044000/6000044500/6000045000/6000045500/6000046000/6000046500/6000047000/6000047500/6000048000/6000048500/6000049000/6000049500/6000050000/6000050500/6000051000/6000051500/6000052000/6000052500/6000053000/6000053500/6000054000/6000054500/6000055000/6000055500/6000056000/6000056500/6000057000/6000057500/6000058000/6000058500/6000059000/6000059500/6000060000/60000
projecting test data set
500/100001000/100001500/100002000/100002500/100003000/100003500/100004000/100004500/100005000/100005500/100006000/100006500/100007000/100007500/100008000/100008500/100009000/100009500/1000010000/10000
writing pickle
done
getting mnist data
projecting train data set
500/600001000/600001500/600002000/600002500/600003000/600003500/600004000/600004500/600005000/600005500/600006000/600006500/600007000/600007500/600008000/600008500/600009000/600009500/6000010000/6000010500/6000011000/6000011500/6000012000/6000012500/6000013000/6000013500/6000014000/6000014500/6000015000/6000015500/6000016000/6000016500/6000017000/6000017500/6000018000/6000018500/6000019000/6000019500/6000020000/6000020500/6000021000/6000021500/6000022000/6000022500/6000023000/6000023500/6000024000/6000024500/6000025000/6000025500/6000026000/6000026500/6000027000/6000027500/6000028000/6000028500/6000029000/6000029500/6000030000/6000030500/6000031000/6000031500/6000032000/6000032500/6000033000/6000033500/6000034000/6000034500/6000035000/6000035500/6000036000/6000036500/6000037000/6000037500/6000038000/6000038500/6000039000/6000039500/6000040000/6000040500/6000041000/6000041500/6000042000/6000042500/6000043000/6000043500/6000044000/6000044500/6000045000/6000045500/6000046000/6000046500/6000047000/6000047500/6000048000/6000048500/6000049000/6000049500/6000050000/6000050500/6000051000/6000051500/6000052000/6000052500/6000053000/6000053500/6000054000/6000054500/6000055000/6000055500/6000056000/6000056500/6000057000/6000057500/6000058000/6000058500/6000059000/6000059500/6000060000/60000
projecting test data set
500/100001000/100001500/100002000/100002500/100003000/100003500/100004000/100004500/100005000/100005500/100006000/100006500/100007000/100007500/100008000/100008500/100009000/100009500/1000010000/10000
writing pickle
done
2022-08-09 04:54:40 - loading data from datasets/SphericalMNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|          | 692/57000 [00:00<00:08, 6915.64it/s]  2%|▏         | 1384/57000 [00:00<00:08, 6866.90it/s]  4%|▎         | 2105/57000 [00:00<00:07, 7022.18it/s]  5%|▍         | 2808/57000 [00:00<00:07, 6994.15it/s]  6%|▌         | 3508/57000 [00:00<00:07, 6981.19it/s]  7%|▋         | 4207/57000 [00:00<00:07, 6822.68it/s]  9%|▊         | 4897/57000 [00:00<00:07, 6844.48it/s] 10%|▉         | 5592/57000 [00:00<00:07, 6876.89it/s] 11%|█         | 6281/57000 [00:00<00:07, 6878.08it/s] 12%|█▏        | 6970/57000 [00:01<00:07, 6667.93it/s] 13%|█▎        | 7639/57000 [00:01<00:07, 6672.99it/s] 15%|█▍        | 8326/57000 [00:01<00:07, 6729.91it/s] 16%|█▌        | 9020/57000 [00:01<00:07, 6791.88it/s] 17%|█▋        | 9700/57000 [00:01<00:06, 6762.02it/s] 18%|█▊        | 10390/57000 [00:01<00:06, 6802.99it/s] 19%|█▉        | 11082/57000 [00:01<00:06, 6836.07it/s] 21%|██        | 11766/57000 [00:01<00:06, 6798.59it/s] 22%|██▏       | 12461/57000 [00:01<00:06, 6841.72it/s] 23%|██▎       | 13146/57000 [00:01<00:06, 6824.97it/s] 24%|██▍       | 13831/57000 [00:02<00:06, 6830.36it/s] 25%|██▌       | 14515/57000 [00:02<00:06, 6827.91it/s] 27%|██▋       | 15204/57000 [00:02<00:06, 6844.21it/s] 28%|██▊       | 15890/57000 [00:02<00:06, 6846.14it/s] 29%|██▉       | 16594/57000 [00:02<00:05, 6902.61it/s] 30%|███       | 17285/57000 [00:02<00:05, 6874.82it/s] 32%|███▏      | 17973/57000 [00:02<00:05, 6798.76it/s] 33%|███▎      | 18654/57000 [00:02<00:05, 6749.26it/s] 34%|███▍      | 19349/57000 [00:02<00:05, 6806.08it/s] 35%|███▌      | 20030/57000 [00:02<00:05, 6790.81it/s] 36%|███▋      | 20720/57000 [00:03<00:05, 6821.94it/s] 38%|███▊      | 21403/57000 [00:03<00:05, 6811.88it/s] 39%|███▉      | 22099/57000 [00:03<00:05, 6853.83it/s] 40%|████      | 22802/57000 [00:03<00:04, 6904.02it/s] 41%|████      | 23503/57000 [00:03<00:04, 6934.91it/s] 42%|████▏     | 24197/57000 [00:03<00:04, 6886.82it/s] 44%|████▎     | 24886/57000 [00:03<00:04, 6863.98it/s] 45%|████▍     | 25573/57000 [00:03<00:04, 6667.46it/s] 46%|████▌     | 26291/57000 [00:03<00:04, 6815.89it/s] 47%|████▋     | 26974/57000 [00:03<00:04, 6758.13it/s] 49%|████▊     | 27669/57000 [00:04<00:04, 6813.11it/s] 50%|████▉     | 28352/57000 [00:04<00:04, 6813.26it/s] 51%|█████     | 29034/57000 [00:04<00:04, 6796.45it/s] 52%|█████▏    | 29724/57000 [00:04<00:03, 6825.68it/s] 53%|█████▎    | 30420/57000 [00:04<00:03, 6864.51it/s] 55%|█████▍    | 31114/57000 [00:04<00:03, 6885.34it/s] 56%|█████▌    | 31803/57000 [00:04<00:03, 6844.24it/s] 57%|█████▋    | 32501/57000 [00:04<00:03, 6883.62it/s] 58%|█████▊    | 33193/57000 [00:04<00:03, 6893.55it/s] 59%|█████▉    | 33893/57000 [00:04<00:03, 6922.81it/s] 61%|██████    | 34593/57000 [00:05<00:03, 6944.94it/s] 62%|██████▏   | 35288/57000 [00:05<00:03, 6899.59it/s] 63%|██████▎   | 35979/57000 [00:05<00:03, 6846.90it/s] 64%|██████▍   | 36664/57000 [00:05<00:02, 6847.75it/s] 66%|██████▌   | 37355/57000 [00:05<00:02, 6865.12it/s] 67%|██████▋   | 38049/57000 [00:05<00:02, 6887.14it/s] 68%|██████▊   | 38738/57000 [00:05<00:02, 6839.10it/s] 69%|██████▉   | 39430/57000 [00:05<00:02, 6862.20it/s] 70%|███████   | 40124/57000 [00:05<00:02, 6882.48it/s] 72%|███████▏  | 40815/57000 [00:05<00:02, 6890.21it/s] 73%|███████▎  | 41510/57000 [00:06<00:02, 6906.29it/s] 74%|███████▍  | 42212/57000 [00:06<00:02, 6939.39it/s] 75%|███████▌  | 42909/57000 [00:06<00:02, 6946.12it/s] 77%|███████▋  | 43612/57000 [00:06<00:01, 6969.32it/s] 78%|███████▊  | 44309/57000 [00:06<00:01, 6920.85it/s] 79%|███████▉  | 45002/57000 [00:06<00:01, 6921.18it/s] 80%|████████  | 45702/57000 [00:06<00:01, 6943.55it/s] 81%|████████▏ | 46397/57000 [00:06<00:01, 6925.01it/s] 83%|████████▎ | 47093/57000 [00:06<00:01, 6933.30it/s] 84%|████████▍ | 47787/57000 [00:06<00:01, 6931.08it/s] 85%|████████▌ | 48481/57000 [00:07<00:01, 6836.51it/s] 86%|████████▋ | 49165/57000 [00:07<00:01, 6824.88it/s] 87%|████████▋ | 49848/57000 [00:07<00:01, 6793.78it/s] 89%|████████▊ | 50549/57000 [00:07<00:00, 6855.63it/s] 90%|████████▉ | 51244/57000 [00:07<00:00, 6883.29it/s] 91%|█████████ | 51933/57000 [00:07<00:00, 6814.08it/s] 92%|█████████▏| 52615/57000 [00:07<00:00, 6715.98it/s] 94%|█████████▎| 53301/57000 [00:07<00:00, 6756.49it/s] 95%|█████████▍| 53993/57000 [00:07<00:00, 6803.62it/s] 96%|█████████▌| 54684/57000 [00:07<00:00, 6833.76it/s] 97%|█████████▋| 55378/57000 [00:08<00:00, 6864.52it/s] 98%|█████████▊| 56072/57000 [00:08<00:00, 6885.69it/s]100%|█████████▉| 56766/57000 [00:08<00:00, 6901.75it/s]100%|██████████| 57000/57000 [00:08<00:00, 6852.38it/s]
2022-08-09 04:54:48 - loading data from datasets/SphericalMNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 23%|██▎       | 700/3000 [00:00<00:00, 6990.97it/s] 47%|████▋     | 1400/3000 [00:00<00:00, 6974.86it/s] 70%|██████▉   | 2098/3000 [00:00<00:00, 6960.83it/s] 93%|█████████▎| 2795/3000 [00:00<00:00, 6955.94it/s]100%|██████████| 3000/3000 [00:00<00:00, 6956.09it/s]
2022-08-09 04:54:49 - loading data from datasets/SphericalMNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 688/10000 [00:00<00:01, 6878.68it/s] 14%|█▍        | 1383/10000 [00:00<00:01, 6918.57it/s] 21%|██        | 2075/10000 [00:00<00:01, 6913.50it/s] 28%|██▊       | 2767/10000 [00:00<00:01, 6913.37it/s] 35%|███▍      | 3465/10000 [00:00<00:00, 6937.23it/s] 42%|████▏     | 4159/10000 [00:00<00:00, 6920.18it/s] 49%|████▊     | 4852/10000 [00:00<00:00, 6755.44it/s] 55%|█████▌    | 5547/10000 [00:00<00:00, 6813.66it/s] 62%|██████▏   | 6239/10000 [00:00<00:00, 6845.15it/s] 69%|██████▉   | 6937/10000 [00:01<00:00, 6886.30it/s] 76%|███████▋  | 7636/10000 [00:01<00:00, 6915.68it/s] 83%|████████▎ | 8328/10000 [00:01<00:00, 6872.30it/s] 90%|█████████ | 9024/10000 [00:01<00:00, 6896.93it/s] 97%|█████████▋| 9720/10000 [00:01<00:00, 6913.61it/s]100%|██████████| 10000/10000 [00:01<00:00, 6888.61it/s]2022-08-09 04:55:01 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
|----------------------------------------------------------------------------------------------------|0.0% 0/20|█████-----------------------------------------------------------------------------------------------|5.0% 1/20|██████████------------------------------------------------------------------------------------------|10.0% 2/20|███████████████-------------------------------------------------------------------------------------|15.0% 3/20|----------------------------------------------------------------------------------------------------|0.0% 0/20|█████-----------------------------------------------------------------------------------------------|5.0% 1/20|██████████------------------------------------------------------------------------------------------|10.0% 2/20|███████████████-------------------------------------------------------------------------------------|15.0% 3/20|████████████████████--------------------------------------------------------------------------------|20.0% 4/20|█████████████████████████---------------------------------------------------------------------------|25.0% 5/20|██████████████████████████████----------------------------------------------------------------------|30.0% 6/20|███████████████████████████████████-----------------------------------------------------------------|35.0% 7/20|████████████████████████████████████████------------------------------------------------------------|40.0% 8/20|█████████████████████████████████████████████-------------------------------------------------------|45.0% 9/20|██████████████████████████████████████████████████--------------------------------------------------|50.0% 10/20|███████████████████████████████████████████████████████---------------------------------------------|55.0% 11/20|████████████████████████████████████████████████████████████----------------------------------------|60.0% 12/20|█████████████████████████████████████████████████████████████████-----------------------------------|65.0% 13/20|██████████████████████████████████████████████████████████████████████------------------------------|70.0% 14/20|███████████████████████████████████████████████████████████████████████████-------------------------|75.0% 15/20|████████████████████████████████████████████████████████████████████████████████--------------------|80.0% 16/20|█████████████████████████████████████████████████████████████████████████████████████---------------|85.0% 17/20|██████████████████████████████████████████████████████████████████████████████████████████----------|90.0% 18/20|███████████████████████████████████████████████████████████████████████████████████████████████-----|95.0% 19/20|████████████████████████████████████████████████████████████████████████████████████████████████████|100.0% 20/20

/hdd2/kaylee/AutoWS-Bench-101/fwrench/lf_selectors/interactive_multiclass/iws.py:152: SparseEfficiencyWarning: Comparing a sparse matrix with a nonzero scalar using != is inefficient, try using == instead.
  accuracy = evaluate_complex_multiclass(LFs, Ytrue, scoring_fn)
/hdd2/kaylee/AutoWS-Bench-101/fwrench/lf_selectors/interactive_multiclass/utils.py:635: RuntimeWarning: invalid value encountered in true_divide
  accuracy = (tp) / numvotes
[3155, 876, 2004, 3087, 386, 2801, 2622, 2683, 2322, 2853, 2137, 2017, 2672, 1835, 206, 496, 556, 2257, 842, 1197, 1374, 1493, 1551, 1494, 2681, 2624, 2621, 2850, 1492, 1433, 843, 2682, 2255, 2136, 2254, 2790, 2434, 2256, 2316, 2315, 2374, 3031, 2971, 2375, 2373, 2493, 3035, 3149, 3207, 3085, 3088, 3094, 3148, 2969, 2376, 2314, 360, 361, 1772, 343, 1652, 601, 3213, 354, 420, 207, 208, 3089, 3147, 1408, 3151, 3211, 455, 1713, 2913, 3271, 3272, 3150, 1712, 600, 780, 1651, 660, 397, 542, 1529, 1406, 1528, 782, 415, 249, 519, 1496, 355, 1531, 1711, 2377, 2133, 2074, 1316, 3331, 299, 1345, 1436, 1469, 1771, 205, 543, 419, 2015, 2134, 2194, 2075, 2135, 2014, 2073, 1468, 1407, 1650, 2193, 1591, 565, 1955, 252]
  0%|          | 0/100 [00:00<?, ?epoch/s]  5%|▌         | 5/100 [00:00<00:02, 40.97epoch/s] 10%|█         | 10/100 [00:00<00:01, 45.38epoch/s] 15%|█▌        | 15/100 [00:00<00:01, 45.83epoch/s] 20%|██        | 20/100 [00:00<00:01, 45.04epoch/s] 25%|██▌       | 25/100 [00:00<00:01, 44.53epoch/s] 30%|███       | 30/100 [00:00<00:01, 44.27epoch/s] 35%|███▌      | 35/100 [00:00<00:01, 45.77epoch/s] 40%|████      | 40/100 [00:00<00:01, 45.62epoch/s] 45%|████▌     | 45/100 [00:00<00:01, 46.19epoch/s] 50%|█████     | 50/100 [00:01<00:01, 45.50epoch/s] 55%|█████▌    | 55/100 [00:01<00:00, 45.83epoch/s] 60%|██████    | 60/100 [00:01<00:00, 44.96epoch/s] 65%|██████▌   | 65/100 [00:01<00:00, 43.92epoch/s] 70%|███████   | 70/100 [00:01<00:00, 45.32epoch/s] 75%|███████▌  | 75/100 [00:01<00:00, 46.04epoch/s] 80%|████████  | 80/100 [00:01<00:00, 45.89epoch/s] 85%|████████▌ | 85/100 [00:01<00:00, 45.19epoch/s] 91%|█████████ | 91/100 [00:01<00:00, 46.75epoch/s] 96%|█████████▌| 96/100 [00:02<00:00, 47.27epoch/s]100%|██████████| 100/100 [00:02<00:00, 45.51epoch/s]
2022-08-09 04:59:16 - [0.00000000e+00 4.19023675e-04 0.00000000e+00 6.78733032e-03
 3.87949718e-02 4.44418819e-01 1.16606267e-01 0.00000000e+00
 0.00000000e+00 4.36863764e-01]
2022-08-09 04:59:16 - [train] accuracy: 0.1000, coverage: 0.8258
2022-08-09 04:59:16 - [0.         0.         0.         0.09090909 0.36363636 0.8
 0.16666667 0.         0.         0.53846154]
2022-08-09 04:59:16 - [valid] accuracy: 0.2471, coverage: 0.8500
2022-08-09 04:59:16 - [0.         0.         0.         0.         0.00763359 0.44110577
 0.03941441 0.         0.         0.49680851]
2022-08-09 04:59:16 - [test] accuracy: 0.0965, coverage: 0.9074
2022-08-09 04:59:16 - label model train acc:    0.09653956358827419
2022-08-09 04:59:16 - label model coverage:     0.9074
0.09653956358827419
