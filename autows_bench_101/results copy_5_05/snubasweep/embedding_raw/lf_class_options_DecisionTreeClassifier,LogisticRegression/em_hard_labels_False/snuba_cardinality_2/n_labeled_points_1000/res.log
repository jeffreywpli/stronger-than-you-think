/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 09:03:29 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 732/57000 [00:00<00:07, 7319.50it/s]  3%|▎         | 1472/57000 [00:00<00:07, 7363.17it/s]  4%|▍         | 2210/57000 [00:00<00:07, 7370.45it/s]  5%|▌         | 2948/57000 [00:00<00:07, 7330.28it/s]  6%|▋         | 3699/57000 [00:00<00:07, 7391.59it/s]  8%|▊         | 4450/57000 [00:00<00:07, 7429.74it/s]  9%|▉         | 5196/57000 [00:00<00:06, 7438.81it/s] 10%|█         | 5942/57000 [00:00<00:06, 7445.02it/s] 12%|█▏        | 6690/57000 [00:00<00:06, 7453.50it/s] 13%|█▎        | 7440/57000 [00:01<00:06, 7465.74it/s] 14%|█▍        | 8188/57000 [00:01<00:06, 7468.68it/s] 16%|█▌        | 8938/57000 [00:01<00:06, 7475.36it/s] 17%|█▋        | 9687/57000 [00:01<00:06, 7479.51it/s] 18%|█▊        | 10435/57000 [00:01<00:06, 7476.60it/s] 20%|█▉        | 11183/57000 [00:01<00:06, 7469.45it/s] 21%|██        | 11933/57000 [00:01<00:06, 7476.76it/s] 22%|██▏       | 12681/57000 [00:01<00:05, 7477.70it/s] 24%|██▎       | 13429/57000 [00:01<00:05, 7472.94it/s] 25%|██▍       | 14177/57000 [00:01<00:05, 7466.61it/s] 26%|██▌       | 14924/57000 [00:02<00:05, 7464.71it/s] 27%|██▋       | 15671/57000 [00:02<00:05, 7456.96it/s] 29%|██▉       | 16417/57000 [00:02<00:05, 7447.03it/s] 30%|███       | 17162/57000 [00:02<00:05, 7429.06it/s] 31%|███▏      | 17905/57000 [00:02<00:05, 7418.06it/s] 33%|███▎      | 18648/57000 [00:02<00:05, 7420.02it/s] 34%|███▍      | 19391/57000 [00:02<00:05, 7407.24it/s] 35%|███▌      | 20132/57000 [00:02<00:04, 7402.54it/s] 37%|███▋      | 20874/57000 [00:02<00:04, 7407.43it/s] 38%|███▊      | 21618/57000 [00:02<00:04, 7415.04it/s] 39%|███▉      | 22360/57000 [00:03<00:04, 7411.97it/s] 41%|████      | 23102/57000 [00:03<00:04, 7413.74it/s] 42%|████▏     | 23844/57000 [00:03<00:04, 7413.45it/s] 43%|████▎     | 24586/57000 [00:03<00:04, 7409.58it/s] 44%|████▍     | 25327/57000 [00:03<00:04, 7394.65it/s] 46%|████▌     | 26069/57000 [00:03<00:04, 7401.70it/s] 47%|████▋     | 26810/57000 [00:03<00:04, 7400.15it/s] 48%|████▊     | 27554/57000 [00:03<00:03, 7409.71it/s] 50%|████▉     | 28297/57000 [00:03<00:03, 7413.33it/s] 51%|█████     | 29042/57000 [00:03<00:03, 7422.70it/s] 52%|█████▏    | 29785/57000 [00:04<00:03, 7420.94it/s] 54%|█████▎    | 30528/57000 [00:04<00:03, 7421.40it/s] 55%|█████▍    | 31271/57000 [00:04<00:03, 7411.75it/s] 56%|█████▌    | 32013/57000 [00:04<00:03, 7392.43it/s] 57%|█████▋    | 32756/57000 [00:04<00:03, 7403.13it/s] 59%|█████▉    | 33502/57000 [00:04<00:03, 7417.35it/s] 60%|██████    | 34246/57000 [00:04<00:03, 7422.29it/s] 61%|██████▏   | 34989/57000 [00:04<00:02, 7417.82it/s] 63%|██████▎   | 35731/57000 [00:04<00:02, 7402.85it/s] 64%|██████▍   | 36472/57000 [00:04<00:02, 7402.52it/s] 65%|██████▌   | 37215/57000 [00:05<00:02, 7408.76it/s] 67%|██████▋   | 37957/57000 [00:05<00:02, 7411.06it/s] 68%|██████▊   | 38702/57000 [00:05<00:02, 7421.13it/s] 69%|██████▉   | 39446/57000 [00:05<00:02, 7423.99it/s] 71%|███████   | 40189/57000 [00:05<00:02, 7421.05it/s] 72%|███████▏  | 40935/57000 [00:05<00:02, 7432.48it/s] 73%|███████▎  | 41679/57000 [00:05<00:02, 7430.59it/s] 74%|███████▍  | 42423/57000 [00:05<00:01, 7427.09it/s] 76%|███████▌  | 43168/57000 [00:05<00:01, 7431.73it/s] 77%|███████▋  | 43913/57000 [00:05<00:01, 7434.67it/s] 78%|███████▊  | 44657/57000 [00:06<00:01, 7432.09it/s] 80%|███████▉  | 45401/57000 [00:06<00:01, 7419.13it/s] 81%|████████  | 46144/57000 [00:06<00:01, 7421.58it/s] 82%|████████▏ | 46887/57000 [00:06<00:01, 7422.17it/s] 84%|████████▎ | 47632/57000 [00:06<00:01, 7428.39it/s] 85%|████████▍ | 48376/57000 [00:06<00:01, 7430.03it/s] 86%|████████▌ | 49120/57000 [00:06<00:01, 7430.55it/s] 87%|████████▋ | 49864/57000 [00:06<00:00, 7423.78it/s] 89%|████████▉ | 50607/57000 [00:06<00:00, 7421.43it/s] 90%|█████████ | 51350/57000 [00:06<00:00, 7408.49it/s] 91%|█████████▏| 52091/57000 [00:07<00:00, 7401.36it/s] 93%|█████████▎| 52832/57000 [00:07<00:00, 7390.23it/s] 94%|█████████▍| 53572/57000 [00:07<00:00, 7380.62it/s] 95%|█████████▌| 54312/57000 [00:07<00:00, 7383.63it/s] 97%|█████████▋| 55054/57000 [00:07<00:00, 7392.27it/s] 98%|█████████▊| 55794/57000 [00:07<00:00, 7391.59it/s] 99%|█████████▉| 56534/57000 [00:07<00:00, 7390.75it/s]100%|██████████| 57000/57000 [00:07<00:00, 7421.13it/s]
2022-05-05 09:03:36 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 739/3000 [00:00<00:00, 7386.45it/s] 49%|████▉     | 1483/3000 [00:00<00:00, 7416.43it/s] 74%|███████▍  | 2231/3000 [00:00<00:00, 7443.10it/s] 99%|█████████▉| 2978/3000 [00:00<00:00, 7451.84it/s]100%|██████████| 3000/3000 [00:00<00:00, 7437.44it/s]
2022-05-05 09:03:37 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 741/10000 [00:00<00:01, 7404.11it/s] 15%|█▍        | 1485/10000 [00:00<00:01, 7419.54it/s] 22%|██▏       | 2229/10000 [00:00<00:01, 7426.23it/s] 30%|██▉       | 2972/10000 [00:00<00:00, 7422.16it/s] 37%|███▋      | 3715/10000 [00:00<00:00, 7421.87it/s] 45%|████▍     | 4460/10000 [00:00<00:00, 7431.24it/s] 52%|█████▏    | 5204/10000 [00:00<00:00, 7433.89it/s] 59%|█████▉    | 5948/10000 [00:00<00:00, 7431.20it/s] 67%|██████▋   | 6696/10000 [00:00<00:00, 7443.96it/s] 74%|███████▍  | 7441/10000 [00:01<00:00, 7445.56it/s] 82%|████████▏ | 8186/10000 [00:01<00:00, 7445.02it/s] 89%|████████▉ | 8931/10000 [00:01<00:00, 7432.82it/s] 97%|█████████▋| 9675/10000 [00:01<00:00, 7433.99it/s]100%|██████████| 10000/10000 [00:01<00:00, 7432.41it/s]
2022-05-05 09:03:41 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 09:03:41 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [1:04:17<?, ?it/s]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 55, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 145, in run_synthesizer
    scoring_fn=scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 77, in prune_heuristics
    L_temp_train = self.apply_heuristics(heuristics[i], self.train_primitive_matrix, feat_combos[i], beta_opt_temp) 
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 50, in apply_heuristics
    L = np.zeros((np.shape(primitive_matrix)[0],len(heuristics)))
numpy.core._exceptions.MemoryError: Unable to allocate 261. GiB for an array with shape (57000, 613872) and data type float64
