/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 03:41:44 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 754/57000 [00:00<00:07, 7535.26it/s]  3%|▎         | 1516/57000 [00:00<00:07, 7582.97it/s]  4%|▍         | 2280/57000 [00:00<00:07, 7606.82it/s]  5%|▌         | 3045/57000 [00:00<00:07, 7621.14it/s]  7%|▋         | 3813/57000 [00:00<00:06, 7640.72it/s]  8%|▊         | 4578/57000 [00:00<00:06, 7576.57it/s]  9%|▉         | 5340/57000 [00:00<00:06, 7589.62it/s] 11%|█         | 6100/57000 [00:00<00:06, 7588.01it/s] 12%|█▏        | 6868/57000 [00:00<00:06, 7615.74it/s] 13%|█▎        | 7639/57000 [00:01<00:06, 7644.45it/s] 15%|█▍        | 8404/57000 [00:01<00:06, 7641.17it/s] 16%|█▌        | 9173/57000 [00:01<00:06, 7655.94it/s] 17%|█▋        | 9941/57000 [00:01<00:06, 7660.78it/s] 19%|█▉        | 10712/57000 [00:01<00:06, 7673.69it/s] 20%|██        | 11482/57000 [00:01<00:05, 7679.95it/s] 21%|██▏       | 12252/57000 [00:01<00:05, 7683.30it/s] 23%|██▎       | 13024/57000 [00:01<00:05, 7692.84it/s] 24%|██▍       | 13794/57000 [00:01<00:05, 7688.40it/s] 26%|██▌       | 14563/57000 [00:01<00:05, 7678.85it/s] 27%|██▋       | 15333/57000 [00:02<00:05, 7684.81it/s] 28%|██▊       | 16102/57000 [00:02<00:05, 7679.58it/s] 30%|██▉       | 16870/57000 [00:02<00:05, 7675.65it/s] 31%|███       | 17639/57000 [00:02<00:05, 7678.73it/s] 32%|███▏      | 18407/57000 [00:02<00:05, 7665.20it/s] 34%|███▎      | 19174/57000 [00:02<00:04, 7639.45it/s] 35%|███▍      | 19939/57000 [00:02<00:04, 7642.49it/s] 36%|███▋      | 20705/57000 [00:02<00:04, 7646.39it/s] 38%|███▊      | 21470/57000 [00:02<00:04, 7620.91it/s] 39%|███▉      | 22233/57000 [00:02<00:04, 7552.74it/s] 40%|████      | 22989/57000 [00:03<00:04, 7520.24it/s] 42%|████▏     | 23754/57000 [00:03<00:04, 7556.28it/s] 43%|████▎     | 24517/57000 [00:03<00:04, 7577.31it/s] 44%|████▍     | 25281/57000 [00:03<00:04, 7593.83it/s] 46%|████▌     | 26046/57000 [00:03<00:04, 7610.46it/s] 47%|████▋     | 26808/57000 [00:03<00:03, 7571.92it/s] 48%|████▊     | 27570/57000 [00:03<00:03, 7586.03it/s] 50%|████▉     | 28333/57000 [00:03<00:03, 7596.27it/s] 51%|█████     | 29099/57000 [00:03<00:03, 7614.33it/s] 52%|█████▏    | 29861/57000 [00:03<00:03, 7612.60it/s] 54%|█████▎    | 30623/57000 [00:04<00:03, 7614.53it/s] 55%|█████▌    | 31388/57000 [00:04<00:03, 7623.78it/s] 56%|█████▋    | 32152/57000 [00:04<00:03, 7626.25it/s] 58%|█████▊    | 32919/57000 [00:04<00:03, 7637.08it/s] 59%|█████▉    | 33684/57000 [00:04<00:03, 7638.66it/s] 60%|██████    | 34448/57000 [00:04<00:02, 7633.11it/s] 62%|██████▏   | 35212/57000 [00:04<00:02, 7630.20it/s] 63%|██████▎   | 35976/57000 [00:04<00:02, 7619.50it/s] 64%|██████▍   | 36740/57000 [00:04<00:02, 7622.76it/s] 66%|██████▌   | 37503/57000 [00:04<00:02, 7593.19it/s] 67%|██████▋   | 38263/57000 [00:05<00:02, 7592.31it/s] 68%|██████▊   | 39028/57000 [00:05<00:02, 7607.16it/s] 70%|██████▉   | 39792/57000 [00:05<00:02, 7616.77it/s] 71%|███████   | 40554/57000 [00:05<00:02, 7612.24it/s] 72%|███████▏  | 41320/57000 [00:05<00:02, 7624.26it/s] 74%|███████▍  | 42083/57000 [00:05<00:01, 7623.96it/s] 75%|███████▌  | 42846/57000 [00:05<00:01, 7615.22it/s] 77%|███████▋  | 43608/57000 [00:05<00:01, 7613.94it/s] 78%|███████▊  | 44370/57000 [00:05<00:01, 7611.31it/s] 79%|███████▉  | 45132/57000 [00:05<00:01, 7606.98it/s] 81%|████████  | 45893/57000 [00:06<00:01, 7605.11it/s] 82%|████████▏ | 46654/57000 [00:06<00:01, 7602.27it/s] 83%|████████▎ | 47415/57000 [00:06<00:01, 7603.46it/s] 85%|████████▍ | 48176/57000 [00:06<00:01, 7602.13it/s] 86%|████████▌ | 48937/57000 [00:06<00:01, 7597.57it/s] 87%|████████▋ | 49699/57000 [00:06<00:00, 7603.57it/s] 89%|████████▊ | 50460/57000 [00:06<00:00, 7604.64it/s] 90%|████████▉ | 51221/57000 [00:06<00:00, 7602.24it/s] 91%|█████████ | 51982/57000 [00:06<00:00, 7598.11it/s] 93%|█████████▎| 52742/57000 [00:06<00:00, 7549.50it/s] 94%|█████████▍| 53498/57000 [00:07<00:00, 7472.97it/s] 95%|█████████▌| 54246/57000 [00:07<00:00, 7445.25it/s] 97%|█████████▋| 55007/57000 [00:07<00:00, 7493.12it/s] 98%|█████████▊| 55775/57000 [00:07<00:00, 7548.20it/s] 99%|█████████▉| 56543/57000 [00:07<00:00, 7585.35it/s]100%|██████████| 57000/57000 [00:07<00:00, 7611.64it/s]
2022-05-05 03:41:51 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▌       | 763/3000 [00:00<00:00, 7626.59it/s] 51%|█████     | 1528/3000 [00:00<00:00, 7638.28it/s] 76%|███████▋  | 2292/3000 [00:00<00:00, 7562.98it/s]100%|██████████| 3000/3000 [00:00<00:00, 7544.46it/s]
2022-05-05 03:41:52 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 744/10000 [00:00<00:01, 7432.60it/s] 15%|█▌        | 1511/10000 [00:00<00:01, 7570.04it/s] 23%|██▎       | 2280/10000 [00:00<00:01, 7624.57it/s] 30%|███       | 3048/10000 [00:00<00:00, 7645.91it/s] 38%|███▊      | 3813/10000 [00:00<00:00, 7646.18it/s] 46%|████▌     | 4580/10000 [00:00<00:00, 7651.59it/s] 53%|█████▎    | 5346/10000 [00:00<00:00, 7624.77it/s] 61%|██████    | 6109/10000 [00:00<00:00, 7558.52it/s] 69%|██████▊   | 6865/10000 [00:00<00:00, 7506.59it/s] 76%|███████▌  | 7616/10000 [00:01<00:00, 7503.54it/s] 84%|████████▎ | 8368/10000 [00:01<00:00, 7507.54it/s] 91%|█████████ | 9119/10000 [00:01<00:00, 7483.49it/s] 99%|█████████▊| 9874/10000 [00:01<00:00, 7503.36it/s]100%|██████████| 10000/10000 [00:01<00:00, 7549.01it/s]
2022-05-05 03:41:56 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 03:41:56 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:11<04:10, 11.37s/it]  4%|▍         | 1/23 [00:11<04:11, 11.45s/it]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 59, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 143, in run_synthesizer
    hf, feat_combos = self.syn.generate_heuristics(model, max_cardinality)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 87, in generate_heuristics
    heuristics.append(self.fit_function(comb, classifier))
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 68, in fit_function
    clf.fit(X, self.val_ground)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1376, in fit
    " class: %r" % classes_[0])
ValueError: This solver needs samples of at least 2 classes in the data, but the data contains only one class: 1
