/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 14:20:42 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 732/57000 [00:00<00:07, 7314.83it/s]  3%|▎         | 1472/57000 [00:00<00:07, 7359.15it/s]  4%|▍         | 2209/57000 [00:00<00:07, 7360.37it/s]  5%|▌         | 2948/57000 [00:00<00:07, 7371.44it/s]  6%|▋         | 3691/57000 [00:00<00:07, 7391.93it/s]  8%|▊         | 4436/57000 [00:00<00:07, 7409.90it/s]  9%|▉         | 5178/57000 [00:00<00:06, 7411.21it/s] 10%|█         | 5923/57000 [00:00<00:06, 7422.26it/s] 12%|█▏        | 6666/57000 [00:00<00:06, 7418.91it/s] 13%|█▎        | 7408/57000 [00:01<00:06, 7370.45it/s] 14%|█▍        | 8151/57000 [00:01<00:06, 7387.46it/s] 16%|█▌        | 8900/57000 [00:01<00:06, 7417.56it/s] 17%|█▋        | 9647/57000 [00:01<00:06, 7432.49it/s] 18%|█▊        | 10391/57000 [00:01<00:06, 7428.81it/s] 20%|█▉        | 11134/57000 [00:01<00:06, 7428.53it/s] 21%|██        | 11877/57000 [00:01<00:06, 7427.05it/s] 22%|██▏       | 12620/57000 [00:01<00:05, 7425.97it/s] 23%|██▎       | 13363/57000 [00:01<00:05, 7426.22it/s] 25%|██▍       | 14107/57000 [00:01<00:05, 7427.88it/s] 26%|██▌       | 14850/57000 [00:02<00:05, 7411.63it/s] 27%|██▋       | 15592/57000 [00:02<00:05, 7407.79it/s] 29%|██▊       | 16335/57000 [00:02<00:05, 7412.48it/s] 30%|██▉       | 17078/57000 [00:02<00:05, 7416.48it/s] 31%|███▏      | 17820/57000 [00:02<00:05, 7408.16it/s] 33%|███▎      | 18561/57000 [00:02<00:05, 7401.33it/s] 34%|███▍      | 19302/57000 [00:02<00:05, 7383.36it/s] 35%|███▌      | 20041/57000 [00:02<00:05, 7384.78it/s] 36%|███▋      | 20780/57000 [00:02<00:04, 7385.93it/s] 38%|███▊      | 21519/57000 [00:02<00:04, 7383.06it/s] 39%|███▉      | 22260/57000 [00:03<00:04, 7390.62it/s] 40%|████      | 23005/57000 [00:03<00:04, 7405.76it/s] 42%|████▏     | 23749/57000 [00:03<00:04, 7414.78it/s] 43%|████▎     | 24493/57000 [00:03<00:04, 7419.31it/s] 44%|████▍     | 25235/57000 [00:03<00:04, 7414.59it/s] 46%|████▌     | 25982/57000 [00:03<00:04, 7427.71it/s] 47%|████▋     | 26727/57000 [00:03<00:04, 7432.10it/s] 48%|████▊     | 27471/57000 [00:03<00:03, 7432.25it/s] 50%|████▉     | 28215/57000 [00:03<00:03, 7433.88it/s] 51%|█████     | 28960/57000 [00:03<00:03, 7437.69it/s] 52%|█████▏    | 29707/57000 [00:04<00:03, 7444.32it/s] 53%|█████▎    | 30454/57000 [00:04<00:03, 7450.10it/s] 55%|█████▍    | 31200/57000 [00:04<00:03, 7450.16it/s] 56%|█████▌    | 31946/57000 [00:04<00:03, 7441.70it/s] 57%|█████▋    | 32691/57000 [00:04<00:03, 7374.17it/s] 59%|█████▊    | 33432/57000 [00:04<00:03, 7383.63it/s] 60%|█████▉    | 34171/57000 [00:04<00:03, 7378.33it/s] 61%|██████    | 34909/57000 [00:04<00:02, 7377.94it/s] 63%|██████▎   | 35649/57000 [00:04<00:02, 7382.19it/s] 64%|██████▍   | 36388/57000 [00:04<00:02, 7380.53it/s] 65%|██████▌   | 37127/57000 [00:05<00:02, 7381.13it/s] 66%|██████▋   | 37868/57000 [00:05<00:02, 7387.39it/s] 68%|██████▊   | 38610/57000 [00:05<00:02, 7394.76it/s] 69%|██████▉   | 39352/57000 [00:05<00:02, 7400.21it/s] 70%|███████   | 40093/57000 [00:05<00:02, 7385.38it/s] 72%|███████▏  | 40832/57000 [00:05<00:02, 7382.82it/s] 73%|███████▎  | 41571/57000 [00:05<00:02, 7384.89it/s] 74%|███████▍  | 42315/57000 [00:05<00:01, 7398.60it/s] 76%|███████▌  | 43059/57000 [00:05<00:01, 7410.47it/s] 77%|███████▋  | 43803/57000 [00:05<00:01, 7419.23it/s] 78%|███████▊  | 44545/57000 [00:06<00:01, 7417.63it/s] 79%|███████▉  | 45288/57000 [00:06<00:01, 7419.70it/s] 81%|████████  | 46034/57000 [00:06<00:01, 7430.94it/s] 82%|████████▏ | 46779/57000 [00:06<00:01, 7435.38it/s] 83%|████████▎ | 47523/57000 [00:06<00:01, 7331.75it/s] 85%|████████▍ | 48269/57000 [00:06<00:01, 7369.29it/s] 86%|████████▌ | 49012/57000 [00:06<00:01, 7384.56it/s] 87%|████████▋ | 49751/57000 [00:06<00:00, 7385.71it/s] 89%|████████▊ | 50493/57000 [00:06<00:00, 7394.98it/s] 90%|████████▉ | 51233/57000 [00:06<00:00, 7392.02it/s] 91%|█████████ | 51975/57000 [00:07<00:00, 7399.30it/s] 92%|█████████▏| 52720/57000 [00:07<00:00, 7411.84it/s] 94%|█████████▍| 53463/57000 [00:07<00:00, 7417.02it/s] 95%|█████████▌| 54206/57000 [00:07<00:00, 7420.47it/s] 96%|█████████▋| 54952/57000 [00:07<00:00, 7430.19it/s] 98%|█████████▊| 55696/57000 [00:07<00:00, 7430.08it/s] 99%|█████████▉| 56440/57000 [00:07<00:00, 7433.00it/s]100%|██████████| 57000/57000 [00:07<00:00, 7406.91it/s]
2022-05-05 14:20:50 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 738/3000 [00:00<00:00, 7378.41it/s] 50%|████▉     | 1485/3000 [00:00<00:00, 7429.12it/s] 74%|███████▍  | 2235/3000 [00:00<00:00, 7459.39it/s] 99%|█████████▉| 2983/3000 [00:00<00:00, 7465.96it/s]100%|██████████| 3000/3000 [00:00<00:00, 7451.66it/s]
2022-05-05 14:20:51 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 749/10000 [00:00<00:01, 7481.73it/s] 15%|█▍        | 1498/10000 [00:00<00:01, 7482.06it/s] 22%|██▏       | 2248/10000 [00:00<00:01, 7487.42it/s] 30%|██▉       | 2997/10000 [00:00<00:00, 7486.96it/s] 37%|███▋      | 3747/10000 [00:00<00:00, 7488.46it/s] 45%|████▍     | 4496/10000 [00:00<00:00, 7482.29it/s] 52%|█████▏    | 5247/10000 [00:00<00:00, 7490.75it/s] 60%|█████▉    | 5997/10000 [00:00<00:00, 7478.24it/s] 67%|██████▋   | 6745/10000 [00:00<00:00, 7394.52it/s] 75%|███████▍  | 7488/10000 [00:01<00:00, 7402.68it/s] 82%|████████▏ | 8234/10000 [00:01<00:00, 7419.22it/s] 90%|████████▉ | 8981/10000 [00:01<00:00, 7432.67it/s] 97%|█████████▋| 9727/10000 [00:01<00:00, 7438.11it/s]100%|██████████| 10000/10000 [00:01<00:00, 7437.16it/s]
2022-05-05 14:21:14 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 14:21:14 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [21:07<?, ?it/s]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 55, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 145, in run_synthesizer
    scoring_fn=scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 77, in prune_heuristics
    L_temp_train = self.apply_heuristics(heuristics[i], self.train_primitive_matrix, feat_combos[i], beta_opt_temp) 
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 50, in apply_heuristics
    L = np.zeros((np.shape(primitive_matrix)[0],len(heuristics)))
numpy.core._exceptions.MemoryError: Unable to allocate 111. GiB for an array with shape (57000, 261632) and data type float64
