/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 12:48:16 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 727/57000 [00:00<00:07, 7265.14it/s]  3%|▎         | 1465/57000 [00:00<00:07, 7327.45it/s]  4%|▍         | 2206/57000 [00:00<00:07, 7362.96it/s]  5%|▌         | 2945/57000 [00:00<00:07, 7370.94it/s]  6%|▋         | 3687/57000 [00:00<00:07, 7385.56it/s]  8%|▊         | 4427/57000 [00:00<00:07, 7390.12it/s]  9%|▉         | 5167/57000 [00:00<00:07, 7387.71it/s] 10%|█         | 5907/57000 [00:00<00:06, 7389.91it/s] 12%|█▏        | 6648/57000 [00:00<00:06, 7393.43it/s] 13%|█▎        | 7388/57000 [00:01<00:06, 7389.17it/s] 14%|█▍        | 8128/57000 [00:01<00:06, 7390.48it/s] 16%|█▌        | 8871/57000 [00:01<00:06, 7401.27it/s] 17%|█▋        | 9612/57000 [00:01<00:06, 7399.39it/s] 18%|█▊        | 10353/57000 [00:01<00:06, 7400.82it/s] 19%|█▉        | 11094/57000 [00:01<00:06, 7401.79it/s] 21%|██        | 11838/57000 [00:01<00:06, 7411.21it/s] 22%|██▏       | 12582/57000 [00:01<00:05, 7417.69it/s] 23%|██▎       | 13328/57000 [00:01<00:05, 7428.10it/s] 25%|██▍       | 14071/57000 [00:01<00:05, 7374.45it/s] 26%|██▌       | 14814/57000 [00:02<00:05, 7388.55it/s] 27%|██▋       | 15559/57000 [00:02<00:05, 7404.94it/s] 29%|██▊       | 16303/57000 [00:02<00:05, 7415.07it/s] 30%|██▉       | 17045/57000 [00:02<00:05, 7410.41it/s] 31%|███       | 17788/57000 [00:02<00:05, 7414.92it/s] 33%|███▎      | 18533/57000 [00:02<00:05, 7425.23it/s] 34%|███▍      | 19276/57000 [00:02<00:05, 7422.91it/s] 35%|███▌      | 20020/57000 [00:02<00:04, 7427.20it/s] 36%|███▋      | 20764/57000 [00:02<00:04, 7429.14it/s] 38%|███▊      | 21507/57000 [00:02<00:04, 7428.99it/s] 39%|███▉      | 22251/57000 [00:03<00:04, 7431.96it/s] 40%|████      | 22995/57000 [00:03<00:04, 7415.55it/s] 42%|████▏     | 23737/57000 [00:03<00:04, 7406.21it/s] 43%|████▎     | 24478/57000 [00:03<00:04, 7406.27it/s] 44%|████▍     | 25219/57000 [00:03<00:04, 7401.53it/s] 46%|████▌     | 25960/57000 [00:03<00:04, 7404.02it/s] 47%|████▋     | 26701/57000 [00:03<00:04, 7405.15it/s] 48%|████▊     | 27442/57000 [00:03<00:03, 7404.80it/s] 49%|████▉     | 28183/57000 [00:03<00:03, 7404.62it/s] 51%|█████     | 28924/57000 [00:03<00:03, 7402.61it/s] 52%|█████▏    | 29665/57000 [00:04<00:03, 7397.57it/s] 53%|█████▎    | 30405/57000 [00:04<00:03, 7392.70it/s] 55%|█████▍    | 31145/57000 [00:04<00:03, 7389.25it/s] 56%|█████▌    | 31885/57000 [00:04<00:03, 7389.75it/s] 57%|█████▋    | 32627/57000 [00:04<00:03, 7398.03it/s] 59%|█████▊    | 33368/57000 [00:04<00:03, 7400.66it/s] 60%|█████▉    | 34109/57000 [00:04<00:03, 7398.91it/s] 61%|██████    | 34851/57000 [00:04<00:02, 7403.85it/s] 62%|██████▏   | 35592/57000 [00:04<00:02, 7400.13it/s] 64%|██████▎   | 36333/57000 [00:04<00:02, 7393.69it/s] 65%|██████▌   | 37077/57000 [00:05<00:02, 7404.62it/s] 66%|██████▋   | 37818/57000 [00:05<00:02, 7405.50it/s] 68%|██████▊   | 38563/57000 [00:05<00:02, 7417.04it/s] 69%|██████▉   | 39309/57000 [00:05<00:02, 7427.26it/s] 70%|███████   | 40052/57000 [00:05<00:02, 7424.24it/s] 72%|███████▏  | 40796/57000 [00:05<00:02, 7428.45it/s] 73%|███████▎  | 41541/57000 [00:05<00:02, 7432.11it/s] 74%|███████▍  | 42285/57000 [00:05<00:01, 7429.38it/s] 75%|███████▌  | 43029/57000 [00:05<00:01, 7430.54it/s] 77%|███████▋  | 43773/57000 [00:05<00:01, 7418.40it/s] 78%|███████▊  | 44515/57000 [00:06<00:01, 7414.41it/s] 79%|███████▉  | 45257/57000 [00:06<00:01, 7411.25it/s] 81%|████████  | 46001/57000 [00:06<00:01, 7418.01it/s] 82%|████████▏ | 46744/57000 [00:06<00:01, 7420.77it/s] 83%|████████▎ | 47488/57000 [00:06<00:01, 7424.75it/s] 85%|████████▍ | 48232/57000 [00:06<00:01, 7428.96it/s] 86%|████████▌ | 48975/57000 [00:06<00:01, 7425.54it/s] 87%|████████▋ | 49718/57000 [00:06<00:00, 7424.86it/s] 89%|████████▊ | 50461/57000 [00:06<00:00, 7424.48it/s] 90%|████████▉ | 51204/57000 [00:06<00:00, 7420.82it/s] 91%|█████████ | 51948/57000 [00:07<00:00, 7423.77it/s] 92%|█████████▏| 52693/57000 [00:07<00:00, 7430.56it/s] 94%|█████████▎| 53437/57000 [00:07<00:00, 7429.12it/s] 95%|█████████▌| 54180/57000 [00:07<00:00, 7428.25it/s] 96%|█████████▋| 54923/57000 [00:07<00:00, 7426.73it/s] 98%|█████████▊| 55667/57000 [00:07<00:00, 7430.28it/s] 99%|█████████▉| 56411/57000 [00:07<00:00, 7429.58it/s]100%|██████████| 57000/57000 [00:07<00:00, 7410.40it/s]
2022-05-05 12:48:24 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 744/3000 [00:00<00:00, 7433.72it/s] 50%|████▉     | 1492/3000 [00:00<00:00, 7457.06it/s] 75%|███████▍  | 2241/3000 [00:00<00:00, 7470.21it/s]100%|█████████▉| 2989/3000 [00:00<00:00, 7464.97it/s]100%|██████████| 3000/3000 [00:00<00:00, 7460.53it/s]
2022-05-05 12:48:24 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 743/10000 [00:00<00:01, 7427.85it/s] 15%|█▍        | 1492/10000 [00:00<00:01, 7460.37it/s] 22%|██▏       | 2240/10000 [00:00<00:01, 7465.42it/s] 30%|██▉       | 2987/10000 [00:00<00:00, 7467.02it/s] 37%|███▋      | 3734/10000 [00:00<00:00, 7467.61it/s] 45%|████▍     | 4481/10000 [00:00<00:00, 7455.02it/s] 52%|█████▏    | 5227/10000 [00:00<00:00, 7445.25it/s] 60%|█████▉    | 5972/10000 [00:00<00:00, 7445.90it/s] 67%|██████▋   | 6717/10000 [00:00<00:00, 7441.34it/s] 75%|███████▍  | 7462/10000 [00:01<00:00, 7436.16it/s] 82%|████████▏ | 8206/10000 [00:01<00:00, 7427.97it/s] 89%|████████▉ | 8949/10000 [00:01<00:00, 7423.52it/s] 97%|█████████▋| 9694/10000 [00:01<00:00, 7428.72it/s]100%|██████████| 10000/10000 [00:01<00:00, 7440.94it/s]
2022-05-05 12:48:47 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 12:48:47 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [25:04<?, ?it/s]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 55, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 145, in run_synthesizer
    scoring_fn=scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 77, in prune_heuristics
    L_temp_train = self.apply_heuristics(heuristics[i], self.train_primitive_matrix, feat_combos[i], beta_opt_temp) 
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 50, in apply_heuristics
    L = np.zeros((np.shape(primitive_matrix)[0],len(heuristics)))
numpy.core._exceptions.MemoryError: Unable to allocate 111. GiB for an array with shape (57000, 261632) and data type float64
