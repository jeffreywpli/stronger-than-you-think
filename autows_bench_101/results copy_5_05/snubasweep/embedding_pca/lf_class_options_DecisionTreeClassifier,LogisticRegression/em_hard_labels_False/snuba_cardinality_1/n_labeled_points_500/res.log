/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 11:03:56 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 732/57000 [00:00<00:07, 7319.50it/s]  3%|▎         | 1475/57000 [00:00<00:07, 7382.15it/s]  4%|▍         | 2219/57000 [00:00<00:07, 7404.35it/s]  5%|▌         | 2966/57000 [00:00<00:07, 7427.16it/s]  7%|▋         | 3713/57000 [00:00<00:07, 7442.09it/s]  8%|▊         | 4462/57000 [00:00<00:07, 7455.53it/s]  9%|▉         | 5210/57000 [00:00<00:06, 7460.21it/s] 10%|█         | 5957/57000 [00:00<00:06, 7460.77it/s] 12%|█▏        | 6704/57000 [00:00<00:06, 7449.88it/s] 13%|█▎        | 7450/57000 [00:01<00:06, 7451.86it/s] 14%|█▍        | 8197/57000 [00:01<00:06, 7454.98it/s] 16%|█▌        | 8943/57000 [00:01<00:06, 7453.24it/s] 17%|█▋        | 9691/57000 [00:01<00:06, 7459.91it/s] 18%|█▊        | 10443/57000 [00:01<00:06, 7477.48it/s] 20%|█▉        | 11192/57000 [00:01<00:06, 7480.91it/s] 21%|██        | 11945/57000 [00:01<00:06, 7492.66it/s] 22%|██▏       | 12700/57000 [00:01<00:05, 7509.36it/s] 24%|██▎       | 13454/57000 [00:01<00:05, 7517.25it/s] 25%|██▍       | 14206/57000 [00:01<00:05, 7512.71it/s] 26%|██▌       | 14959/57000 [00:02<00:05, 7517.58it/s] 28%|██▊       | 15712/57000 [00:02<00:05, 7520.17it/s] 29%|██▉       | 16465/57000 [00:02<00:05, 7510.31it/s] 30%|███       | 17217/57000 [00:02<00:05, 7505.62it/s] 32%|███▏      | 17968/57000 [00:02<00:05, 7504.77it/s] 33%|███▎      | 18719/57000 [00:02<00:05, 7503.16it/s] 34%|███▍      | 19470/57000 [00:02<00:05, 7501.49it/s] 35%|███▌      | 20221/57000 [00:02<00:04, 7501.92it/s] 37%|███▋      | 20975/57000 [00:02<00:04, 7511.27it/s] 38%|███▊      | 21729/57000 [00:02<00:04, 7517.85it/s] 39%|███▉      | 22481/57000 [00:03<00:04, 7512.37it/s] 41%|████      | 23233/57000 [00:03<00:04, 7511.15it/s] 42%|████▏     | 23985/57000 [00:03<00:04, 7507.24it/s] 43%|████▎     | 24738/57000 [00:03<00:04, 7512.58it/s] 45%|████▍     | 25490/57000 [00:03<00:04, 7506.30it/s] 46%|████▌     | 26241/57000 [00:03<00:04, 7506.02it/s] 47%|████▋     | 26992/57000 [00:03<00:04, 7495.52it/s] 49%|████▊     | 27742/57000 [00:03<00:03, 7488.69it/s] 50%|████▉     | 28491/57000 [00:03<00:03, 7487.89it/s] 51%|█████▏    | 29242/57000 [00:03<00:03, 7491.67it/s] 53%|█████▎    | 29995/57000 [00:04<00:03, 7501.49it/s] 54%|█████▍    | 30749/57000 [00:04<00:03, 7511.87it/s] 55%|█████▌    | 31501/57000 [00:04<00:03, 7510.21it/s] 57%|█████▋    | 32253/57000 [00:04<00:03, 7502.81it/s] 58%|█████▊    | 33004/57000 [00:04<00:03, 7503.93it/s] 59%|█████▉    | 33755/57000 [00:04<00:03, 7493.84it/s] 61%|██████    | 34505/57000 [00:04<00:03, 7489.31it/s] 62%|██████▏   | 35257/57000 [00:04<00:02, 7497.68it/s] 63%|██████▎   | 36007/57000 [00:04<00:02, 7494.16it/s] 64%|██████▍   | 36757/57000 [00:04<00:02, 7433.35it/s] 66%|██████▌   | 37511/57000 [00:05<00:02, 7463.78it/s] 67%|██████▋   | 38265/57000 [00:05<00:02, 7485.67it/s] 68%|██████▊   | 39016/57000 [00:05<00:02, 7492.07it/s] 70%|██████▉   | 39768/57000 [00:05<00:02, 7500.35it/s] 71%|███████   | 40519/57000 [00:05<00:02, 7493.45it/s] 72%|███████▏  | 41273/57000 [00:05<00:02, 7506.06it/s] 74%|███████▎  | 42027/57000 [00:05<00:01, 7514.20it/s] 75%|███████▌  | 42780/57000 [00:05<00:01, 7518.32it/s] 76%|███████▋  | 43534/57000 [00:05<00:01, 7522.13it/s] 78%|███████▊  | 44287/57000 [00:05<00:01, 7517.81it/s] 79%|███████▉  | 45040/57000 [00:06<00:01, 7520.37it/s] 80%|████████  | 45793/57000 [00:06<00:01, 7506.17it/s] 82%|████████▏ | 46546/57000 [00:06<00:01, 7510.88it/s] 83%|████████▎ | 47298/57000 [00:06<00:01, 7508.34it/s] 84%|████████▍ | 48051/57000 [00:06<00:01, 7512.45it/s] 86%|████████▌ | 48803/57000 [00:06<00:01, 7511.59it/s] 87%|████████▋ | 49555/57000 [00:06<00:00, 7499.20it/s] 88%|████████▊ | 50306/57000 [00:06<00:00, 7502.37it/s] 90%|████████▉ | 51057/57000 [00:06<00:00, 7479.69it/s] 91%|█████████ | 51805/57000 [00:06<00:00, 7478.88it/s] 92%|█████████▏| 52553/57000 [00:07<00:00, 7476.27it/s] 94%|█████████▎| 53301/57000 [00:07<00:00, 7471.34it/s] 95%|█████████▍| 54049/57000 [00:07<00:00, 7463.69it/s] 96%|█████████▌| 54796/57000 [00:07<00:00, 7453.47it/s] 97%|█████████▋| 55542/57000 [00:07<00:00, 7445.67it/s] 99%|█████████▊| 56287/57000 [00:07<00:00, 7441.50it/s]100%|██████████| 57000/57000 [00:07<00:00, 7487.51it/s]
2022-05-05 11:04:04 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▍       | 747/3000 [00:00<00:00, 7467.89it/s] 50%|█████     | 1502/3000 [00:00<00:00, 7510.38it/s] 75%|███████▌  | 2255/3000 [00:00<00:00, 7519.18it/s]100%|██████████| 3000/3000 [00:00<00:00, 7514.18it/s]
2022-05-05 11:04:05 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  8%|▊         | 750/10000 [00:00<00:01, 7491.09it/s] 15%|█▌        | 1503/10000 [00:00<00:01, 7509.27it/s] 23%|██▎       | 2254/10000 [00:00<00:01, 7506.28it/s] 30%|███       | 3005/10000 [00:00<00:00, 7503.09it/s] 38%|███▊      | 3756/10000 [00:00<00:00, 7499.50it/s] 45%|████▌     | 4506/10000 [00:00<00:00, 7495.85it/s] 53%|█████▎    | 5256/10000 [00:00<00:00, 7497.11it/s] 60%|██████    | 6006/10000 [00:00<00:00, 7491.00it/s] 68%|██████▊   | 6758/10000 [00:00<00:00, 7497.46it/s] 75%|███████▌  | 7508/10000 [00:01<00:00, 7495.96it/s] 83%|████████▎ | 8258/10000 [00:01<00:00, 7494.68it/s] 90%|█████████ | 9008/10000 [00:01<00:00, 7380.35it/s] 98%|█████████▊| 9762/10000 [00:01<00:00, 7427.78it/s]100%|██████████| 10000/10000 [00:01<00:00, 7472.18it/s]
(67500, 784)
2022-05-05 11:04:09 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 11:04:09 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:02<00:52,  2.40s/it]  4%|▍         | 1/23 [00:02<00:53,  2.41s/it]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 59, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 143, in run_synthesizer
    hf, feat_combos = self.syn.generate_heuristics(model, max_cardinality)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 87, in generate_heuristics
    heuristics.append(self.fit_function(comb, classifier))
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 68, in fit_function
    clf.fit(X, self.val_ground)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1376, in fit
    " class: %r" % classes_[0])
ValueError: This solver needs samples of at least 2 classes in the data, but the data contains only one class: 1
