/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 11:03:06 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 723/57000 [00:00<00:07, 7223.72it/s]  3%|▎         | 1454/57000 [00:00<00:07, 7272.29it/s]  4%|▍         | 2188/57000 [00:00<00:07, 7300.60it/s]  5%|▌         | 2919/57000 [00:00<00:07, 7230.12it/s]  6%|▋         | 3654/57000 [00:00<00:07, 7271.67it/s]  8%|▊         | 4388/57000 [00:00<00:07, 7293.22it/s]  9%|▉         | 5124/57000 [00:00<00:07, 7312.68it/s] 10%|█         | 5857/57000 [00:00<00:06, 7317.92it/s] 12%|█▏        | 6591/57000 [00:00<00:06, 7323.00it/s] 13%|█▎        | 7328/57000 [00:01<00:06, 7336.65it/s] 14%|█▍        | 8062/57000 [00:01<00:06, 7330.73it/s] 15%|█▌        | 8796/57000 [00:01<00:06, 7321.32it/s] 17%|█▋        | 9531/57000 [00:01<00:06, 7328.61it/s] 18%|█▊        | 10269/57000 [00:01<00:06, 7341.94it/s] 19%|█▉        | 11009/57000 [00:01<00:06, 7357.59it/s] 21%|██        | 11750/57000 [00:01<00:06, 7371.06it/s] 22%|██▏       | 12493/57000 [00:01<00:06, 7388.56it/s] 23%|██▎       | 13234/57000 [00:01<00:05, 7391.86it/s] 25%|██▍       | 13975/57000 [00:01<00:05, 7395.32it/s] 26%|██▌       | 14715/57000 [00:02<00:05, 7389.80it/s] 27%|██▋       | 15454/57000 [00:02<00:05, 7386.82it/s] 28%|██▊       | 16193/57000 [00:02<00:05, 7367.91it/s] 30%|██▉       | 16930/57000 [00:02<00:05, 7366.20it/s] 31%|███       | 17668/57000 [00:02<00:05, 7368.94it/s] 32%|███▏      | 18406/57000 [00:02<00:05, 7372.10it/s] 34%|███▎      | 19144/57000 [00:02<00:05, 7368.18it/s] 35%|███▍      | 19881/57000 [00:02<00:05, 7362.14it/s] 36%|███▌      | 20621/57000 [00:02<00:04, 7370.61it/s] 37%|███▋      | 21359/57000 [00:02<00:04, 7368.27it/s] 39%|███▉      | 22097/57000 [00:03<00:04, 7371.72it/s] 40%|████      | 22835/57000 [00:03<00:04, 7372.92it/s] 41%|████▏     | 23573/57000 [00:03<00:04, 7368.52it/s] 43%|████▎     | 24310/57000 [00:03<00:04, 7235.85it/s] 44%|████▍     | 25048/57000 [00:03<00:04, 7278.39it/s] 45%|████▌     | 25789/57000 [00:03<00:04, 7315.18it/s] 47%|████▋     | 26530/57000 [00:03<00:04, 7342.53it/s] 48%|████▊     | 27272/57000 [00:03<00:04, 7365.51it/s] 49%|████▉     | 28014/57000 [00:03<00:03, 7379.43it/s] 50%|█████     | 28756/57000 [00:03<00:03, 7389.48it/s] 52%|█████▏    | 29498/57000 [00:04<00:03, 7397.31it/s] 53%|█████▎    | 30238/57000 [00:04<00:03, 7395.98it/s] 54%|█████▍    | 30978/57000 [00:04<00:03, 7396.05it/s] 56%|█████▌    | 31718/57000 [00:04<00:03, 7387.40it/s] 57%|█████▋    | 32457/57000 [00:04<00:03, 7383.74it/s] 58%|█████▊    | 33200/57000 [00:04<00:03, 7395.97it/s] 60%|█████▉    | 33940/57000 [00:04<00:03, 7386.67it/s] 61%|██████    | 34679/57000 [00:04<00:03, 7381.35it/s] 62%|██████▏   | 35418/57000 [00:04<00:02, 7377.17it/s] 63%|██████▎   | 36156/57000 [00:04<00:02, 7369.06it/s] 65%|██████▍   | 36893/57000 [00:05<00:02, 7361.67it/s] 66%|██████▌   | 37632/57000 [00:05<00:02, 7368.18it/s] 67%|██████▋   | 38369/57000 [00:05<00:02, 7357.73it/s] 69%|██████▊   | 39105/57000 [00:05<00:02, 7351.98it/s] 70%|██████▉   | 39842/57000 [00:05<00:02, 7354.79it/s] 71%|███████   | 40578/57000 [00:05<00:02, 7344.07it/s] 72%|███████▏  | 41315/57000 [00:05<00:02, 7350.35it/s] 74%|███████▍  | 42051/57000 [00:05<00:02, 7352.26it/s] 75%|███████▌  | 42788/57000 [00:05<00:01, 7354.85it/s] 76%|███████▋  | 43524/57000 [00:05<00:01, 7347.71it/s] 78%|███████▊  | 44259/57000 [00:06<00:01, 7343.82it/s] 79%|███████▉  | 44995/57000 [00:06<00:01, 7347.17it/s] 80%|████████  | 45731/57000 [00:06<00:01, 7349.07it/s] 82%|████████▏ | 46468/57000 [00:06<00:01, 7354.48it/s] 83%|████████▎ | 47205/57000 [00:06<00:01, 7356.74it/s] 84%|████████▍ | 47941/57000 [00:06<00:01, 7356.60it/s] 85%|████████▌ | 48682/57000 [00:06<00:01, 7369.92it/s] 87%|████████▋ | 49427/57000 [00:06<00:01, 7392.26it/s] 88%|████████▊ | 50167/57000 [00:06<00:00, 7387.00it/s] 89%|████████▉ | 50907/57000 [00:06<00:00, 7390.08it/s] 91%|█████████ | 51649/57000 [00:07<00:00, 7397.78it/s] 92%|█████████▏| 52389/57000 [00:07<00:00, 7390.25it/s] 93%|█████████▎| 53129/57000 [00:07<00:00, 7373.70it/s] 95%|█████████▍| 53867/57000 [00:07<00:00, 7364.79it/s] 96%|█████████▌| 54604/57000 [00:07<00:00, 7355.53it/s] 97%|█████████▋| 55340/57000 [00:07<00:00, 7349.15it/s] 98%|█████████▊| 56075/57000 [00:07<00:00, 7345.13it/s]100%|█████████▉| 56812/57000 [00:07<00:00, 7352.47it/s]100%|██████████| 57000/57000 [00:07<00:00, 7356.37it/s]
2022-05-05 11:03:14 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 24%|██▍       | 733/3000 [00:00<00:00, 7323.79it/s] 49%|████▉     | 1475/3000 [00:00<00:00, 7379.00it/s] 74%|███████▍  | 2215/3000 [00:00<00:00, 7387.16it/s] 99%|█████████▊| 2956/3000 [00:00<00:00, 7393.30it/s]100%|██████████| 3000/3000 [00:00<00:00, 7382.40it/s]
2022-05-05 11:03:14 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  7%|▋         | 735/10000 [00:00<00:01, 7341.29it/s] 15%|█▍        | 1474/10000 [00:00<00:01, 7369.31it/s] 22%|██▏       | 2215/10000 [00:00<00:01, 7387.73it/s] 30%|██▉       | 2955/10000 [00:00<00:00, 7389.15it/s] 37%|███▋      | 3694/10000 [00:00<00:00, 7378.49it/s] 44%|████▍     | 4432/10000 [00:00<00:00, 7368.46it/s] 52%|█████▏    | 5169/10000 [00:00<00:00, 7366.87it/s] 59%|█████▉    | 5906/10000 [00:00<00:00, 7365.20it/s] 66%|██████▋   | 6646/10000 [00:00<00:00, 7373.69it/s] 74%|███████▍  | 7384/10000 [00:01<00:00, 7367.14it/s] 81%|████████  | 8121/10000 [00:01<00:00, 7364.82it/s] 89%|████████▊ | 8858/10000 [00:01<00:00, 7366.05it/s] 96%|█████████▌| 9595/10000 [00:01<00:00, 7366.60it/s]100%|██████████| 10000/10000 [00:01<00:00, 7369.16it/s]
(67100, 784)
2022-05-05 11:03:19 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 11:03:19 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:02<00:50,  2.29s/it]  9%|▊         | 2/23 [00:04<00:49,  2.36s/it] 13%|█▎        | 3/23 [00:07<00:48,  2.41s/it] 17%|█▋        | 4/23 [00:09<00:46,  2.47s/it] 22%|██▏       | 5/23 [00:12<00:45,  2.52s/it] 26%|██▌       | 6/23 [00:15<00:43,  2.59s/it] 30%|███       | 7/23 [00:17<00:42,  2.66s/it] 30%|███       | 7/23 [00:17<00:40,  2.55s/it]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 59, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 143, in run_synthesizer
    hf, feat_combos = self.syn.generate_heuristics(model, max_cardinality)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 87, in generate_heuristics
    heuristics.append(self.fit_function(comb, classifier))
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 68, in fit_function
    clf.fit(X, self.val_ground)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1376, in fit
    " class: %r" % classes_[0])
ValueError: This solver needs samples of at least 2 classes in the data, but the data contains only one class: 1
