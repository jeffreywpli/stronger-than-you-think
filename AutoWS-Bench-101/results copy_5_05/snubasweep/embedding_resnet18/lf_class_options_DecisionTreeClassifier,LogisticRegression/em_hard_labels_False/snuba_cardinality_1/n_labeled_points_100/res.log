/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/torchvision/datasets/mnist.py:498: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1631630836880/work/torch/csrc/utils/tensor_numpy.cpp:180.)
  return torch.from_numpy(parsed.astype(m[2], copy=False)).view(*s)
2022-05-05 13:45:07 - loading data from datasets/MNIST_3000/train.json
  0%|          | 0/57000 [00:00<?, ?it/s]  1%|▏         | 752/57000 [00:00<00:07, 7512.72it/s]  3%|▎         | 1511/57000 [00:00<00:07, 7555.59it/s]  4%|▍         | 2269/57000 [00:00<00:07, 7563.73it/s]  5%|▌         | 3026/57000 [00:00<00:07, 7539.75it/s]  7%|▋         | 3780/57000 [00:00<00:07, 7443.82it/s]  8%|▊         | 4539/57000 [00:00<00:07, 7490.81it/s]  9%|▉         | 5303/57000 [00:00<00:06, 7538.62it/s] 11%|█         | 6065/57000 [00:00<00:06, 7563.35it/s] 12%|█▏        | 6824/57000 [00:00<00:06, 7570.98it/s] 13%|█▎        | 7588/57000 [00:01<00:06, 7591.76it/s] 15%|█▍        | 8355/57000 [00:01<00:06, 7612.77it/s] 16%|█▌        | 9122/57000 [00:01<00:06, 7627.61it/s] 17%|█▋        | 9887/57000 [00:01<00:06, 7632.19it/s] 19%|█▊        | 10651/57000 [00:01<00:06, 7631.77it/s] 20%|██        | 11415/57000 [00:01<00:05, 7633.39it/s] 21%|██▏       | 12183/57000 [00:01<00:05, 7645.30it/s] 23%|██▎       | 12950/57000 [00:01<00:05, 7651.22it/s] 24%|██▍       | 13717/57000 [00:01<00:05, 7655.63it/s] 25%|██▌       | 14483/57000 [00:01<00:05, 7641.49it/s] 27%|██▋       | 15248/57000 [00:02<00:05, 7642.46it/s] 28%|██▊       | 16016/57000 [00:02<00:05, 7650.92it/s] 29%|██▉       | 16782/57000 [00:02<00:05, 7635.78it/s] 31%|███       | 17546/57000 [00:02<00:05, 7629.97it/s] 32%|███▏      | 18310/57000 [00:02<00:05, 7625.56it/s] 33%|███▎      | 19073/57000 [00:02<00:04, 7617.59it/s] 35%|███▍      | 19835/57000 [00:02<00:04, 7608.68it/s] 36%|███▌      | 20600/57000 [00:02<00:04, 7618.98it/s] 37%|███▋      | 21362/57000 [00:02<00:04, 7608.18it/s] 39%|███▉      | 22124/57000 [00:02<00:04, 7611.57it/s] 40%|████      | 22886/57000 [00:03<00:04, 7613.14it/s] 41%|████▏     | 23648/57000 [00:03<00:04, 7518.87it/s] 43%|████▎     | 24411/57000 [00:03<00:04, 7551.10it/s] 44%|████▍     | 25171/57000 [00:03<00:04, 7565.21it/s] 45%|████▌     | 25932/57000 [00:03<00:04, 7575.93it/s] 47%|████▋     | 26691/57000 [00:03<00:03, 7577.71it/s] 48%|████▊     | 27450/57000 [00:03<00:03, 7580.51it/s] 49%|████▉     | 28209/57000 [00:03<00:03, 7582.34it/s] 51%|█████     | 28969/57000 [00:03<00:03, 7587.23it/s] 52%|█████▏    | 29728/57000 [00:03<00:03, 7580.90it/s] 53%|█████▎    | 30488/57000 [00:04<00:03, 7584.68it/s] 55%|█████▍    | 31247/57000 [00:04<00:03, 7584.13it/s] 56%|█████▌    | 32006/57000 [00:04<00:03, 7579.65it/s] 57%|█████▋    | 32766/57000 [00:04<00:03, 7585.07it/s] 59%|█████▉    | 33525/57000 [00:04<00:03, 7585.66it/s] 60%|██████    | 34286/57000 [00:04<00:02, 7592.59it/s] 61%|██████▏   | 35049/57000 [00:04<00:02, 7601.60it/s] 63%|██████▎   | 35810/57000 [00:04<00:02, 7596.08it/s] 64%|██████▍   | 36573/57000 [00:04<00:02, 7603.47it/s] 65%|██████▌   | 37334/57000 [00:04<00:02, 7603.56it/s] 67%|██████▋   | 38097/57000 [00:05<00:02, 7608.87it/s] 68%|██████▊   | 38858/57000 [00:05<00:02, 7512.39it/s] 70%|██████▉   | 39615/57000 [00:05<00:02, 7529.27it/s] 71%|███████   | 40372/57000 [00:05<00:02, 7540.15it/s] 72%|███████▏  | 41134/57000 [00:05<00:02, 7562.45it/s] 73%|███████▎  | 41894/57000 [00:05<00:01, 7571.28it/s] 75%|███████▍  | 42652/57000 [00:05<00:01, 7430.08it/s] 76%|███████▌  | 43413/57000 [00:05<00:01, 7480.82it/s] 77%|███████▋  | 44170/57000 [00:05<00:01, 7506.80it/s] 79%|███████▉  | 44931/57000 [00:05<00:01, 7534.73it/s] 80%|████████  | 45692/57000 [00:06<00:01, 7554.83it/s] 81%|████████▏ | 46454/57000 [00:06<00:01, 7571.34it/s] 83%|████████▎ | 47214/57000 [00:06<00:01, 7579.08it/s] 84%|████████▍ | 47980/57000 [00:06<00:01, 7601.12it/s] 86%|████████▌ | 48742/57000 [00:06<00:01, 7606.31it/s] 87%|████████▋ | 49503/57000 [00:06<00:00, 7605.44it/s] 88%|████████▊ | 50267/57000 [00:06<00:00, 7612.85it/s] 90%|████████▉ | 51029/57000 [00:06<00:00, 7609.32it/s] 91%|█████████ | 51792/57000 [00:06<00:00, 7615.35it/s] 92%|█████████▏| 52554/57000 [00:06<00:00, 7614.31it/s] 94%|█████████▎| 53316/57000 [00:07<00:00, 7493.83it/s] 95%|█████████▍| 54074/57000 [00:07<00:00, 7517.25it/s] 96%|█████████▌| 54831/57000 [00:07<00:00, 7531.51it/s] 98%|█████████▊| 55589/57000 [00:07<00:00, 7543.18it/s] 99%|█████████▉| 56348/57000 [00:07<00:00, 7556.92it/s]100%|██████████| 57000/57000 [00:07<00:00, 7580.42it/s]
2022-05-05 13:45:14 - loading data from datasets/MNIST_3000/valid.json
  0%|          | 0/3000 [00:00<?, ?it/s] 25%|██▌       | 758/3000 [00:00<00:00, 7579.21it/s] 51%|█████     | 1524/3000 [00:00<00:00, 7626.28it/s] 76%|███████▋  | 2289/3000 [00:00<00:00, 7634.57it/s]100%|██████████| 3000/3000 [00:00<00:00, 7627.31it/s]
2022-05-05 13:45:15 - loading data from datasets/MNIST_3000/test.json
  0%|          | 0/10000 [00:00<?, ?it/s]  8%|▊         | 762/10000 [00:00<00:01, 7611.59it/s] 15%|█▌        | 1525/10000 [00:00<00:01, 7621.19it/s] 23%|██▎       | 2288/10000 [00:00<00:01, 7612.39it/s] 30%|███       | 3050/10000 [00:00<00:00, 7606.78it/s] 38%|███▊      | 3811/10000 [00:00<00:00, 7588.28it/s] 46%|████▌     | 4571/10000 [00:00<00:00, 7591.92it/s] 53%|█████▎    | 5331/10000 [00:00<00:00, 7571.92it/s] 61%|██████    | 6089/10000 [00:00<00:00, 7567.12it/s] 68%|██████▊   | 6850/10000 [00:00<00:00, 7579.32it/s] 76%|███████▌  | 7613/10000 [00:01<00:00, 7593.52it/s] 84%|████████▍ | 8376/10000 [00:01<00:00, 7602.10it/s] 91%|█████████▏| 9139/10000 [00:01<00:00, 7609.71it/s] 99%|█████████▉| 9903/10000 [00:01<00:00, 7617.13it/s]100%|██████████| 10000/10000 [00:01<00:00, 7599.76it/s]
2022-05-05 13:45:38 - ('DecisionTreeClassifier', 'LogisticRegression')
2022-05-05 13:45:38 - Using LF classes: [functools.partial(<class 'sklearn.tree._classes.DecisionTreeClassifier'>, max_depth=1), <class 'sklearn.linear_model._logistic.LogisticRegression'>]
Fitting MulticlassAdaptor... Class 0
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:07<?, ?it/s]
Fitting MulticlassAdaptor... Class 1
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:07<?, ?it/s]
Fitting MulticlassAdaptor... Class 2
  0%|          | 0/23 [00:00<?, ?it/s]  0%|          | 0/23 [00:07<?, ?it/s]
Fitting MulticlassAdaptor... Class 3
  0%|          | 0/23 [00:00<?, ?it/s]  4%|▍         | 1/23 [00:07<02:50,  7.76s/it]  9%|▊         | 2/23 [00:16<02:49,  8.07s/it] 13%|█▎        | 3/23 [00:24<02:44,  8.24s/it] 17%|█▋        | 4/23 [00:33<02:38,  8.36s/it] 22%|██▏       | 5/23 [00:41<02:32,  8.46s/it] 26%|██▌       | 6/23 [00:50<02:25,  8.55s/it] 30%|███       | 7/23 [00:59<02:18,  8.63s/it] 35%|███▍      | 8/23 [01:07<02:10,  8.68s/it] 35%|███▍      | 8/23 [01:08<02:07,  8.50s/it]
Traceback (most recent call last):
  File "examples/fwrench_examples/mnist.py", line 184, in <module>
    fire.Fire(main)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 141, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/fire/core.py", line 681, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "examples/fwrench_examples/mnist.py", line 127, in main
    selector.fit(valid_data_embed, train_data_embed)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/examples/fwrench_examples/utils.py", line 83, in fit
    self.lf_selectors[i].fit(labeled_data_i, unlabeled_data_i)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba_lf_selector.py", line 59, in fit
    model=self.lf_generator, scoring_fn=self.scoring_fn)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/heuristic_generator.py", line 143, in run_synthesizer
    hf, feat_combos = self.syn.generate_heuristics(model, max_cardinality)
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 87, in generate_heuristics
    heuristics.append(self.fit_function(comb, classifier))
  File "/hdd2/nick/github.com/Kaylee0501/FWRENCH/fwrench/lf_selectors/snuba/synthesizer.py", line 68, in fit_function
    clf.fit(X, self.val_ground)
  File "/home/nick/anaconda3/envs/FWRENCH/lib/python3.7/site-packages/sklearn/linear_model/_logistic.py", line 1376, in fit
    " class: %r" % classes_[0])
ValueError: This solver needs samples of at least 2 classes in the data, but the data contains only one class: 1
